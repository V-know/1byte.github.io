<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Flask sqlalchemy 设置默认时间</title>
      <link href="/python/get-default-time-for-flask-sqlalchemy.html"/>
      <url>/python/get-default-time-for-flask-sqlalchemy.html</url>
      <content type="html"><![CDATA[<h3 id="记录第一次创建时间-default"><a href="#记录第一次创建时间-default" class="headerlink" title="记录第一次创建时间: default"></a>记录第一次创建时间: <code>default</code></h3><p>最近发现程序中凡存在默认时间的部分，经常出现多条记录create_time时间一致的情况，而实际上创建时间明明差的很多<br>一番debug之后发现坑在这里：</p><p>falsk中如下两个字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create_time1 = db.Column(db.DateTime, default=datetime.now)</span><br><span class="line"></span><br><span class="line">create_time2 = db.Column(db.DateTime, default=datetime.now())</span><br></pre></td></tr></table></figure><p>两者的区别:</p><p><strong>第一个插入的是期望的, 数据的插入时间，每条数据插入时可自动根据当前时间生成</strong></p><p><strong>第二条是一个固定的时间, 程序部署的时间，所有的数据都是这个固定时间</strong></p><p>实际上默认值在mysql数据库没有体现, 都是sqlalchemy在插入数据时加的</p><hr><h3 id="如果想想在生成的table中有默认值使用-server-default"><a href="#如果想想在生成的table中有默认值使用-server-default" class="headerlink" title="如果想想在生成的table中有默认值使用: server_default"></a>如果想想在生成的table中有默认值使用: <code>server_default</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = db.Column(db.String(<span class="number">45</span>), server_default=<span class="string">'hh'</span>)</span><br></pre></td></tr></table></figure><p>当我们要给布尔值类型指定server_default时，需要用到text</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> text</span><br><span class="line">is_domain = db.Column(db.Boolean,default=<span class="keyword">False</span>,server_default=text(<span class="string">'0'</span>))</span><br></pre></td></tr></table></figure><p>因为mysql的datetime类型的数据不支持函数, 所以没法指定默认值位当前时间</p><h3 id="记录每次修改的时间-onupdate"><a href="#记录每次修改的时间-onupdate" class="headerlink" title="记录每次修改的时间: onupdate"></a>记录每次修改的时间: <code>onupdate</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update_time = db.Column(db.DateTime, default=datetime.now,onupdate=datetime.now)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> SqlAlhemy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Celery SQLAlchemy issue</title>
      <link href="/python/celery-sqlalchemy-issue.html"/>
      <url>/python/celery-sqlalchemy-issue.html</url>
      <content type="html"><![CDATA[<p>一个基于Flask + SQLAlchemy  + Celery的后端任务平台，主要用到异步运行Ansible任务。<br>因业务需要, 前两天升级了mysql配置，升级过程中重启了mysql服务。</p><p>下午，在执行Ansible后台任务的时候报错：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">StatementError</span><span class="params">(<span class="string">"(sqlalchemy.exc.InvalidRequestError) Can't reconnect until invalid transaction is rolled back"</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>排查下来发现，mysql重启后，如果不一并重启Flask和Celery进程，就会报出上述错误。</p><p>参考：<a href="https://groups.google.com/forum/#!topic/sqlalchemy/h9U0Kmx_vMU" target="_blank" rel="noopener">https://groups.google.com/forum/#!topic/sqlalchemy/h9U0Kmx_vMU</a></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Celery </tag>
            
            <tag> SQLAlchemy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flask request小结</title>
      <link href="/python/flask-request.html"/>
      <url>/python/flask-request.html</url>
      <content type="html"><![CDATA[<h2 id="一、post-请求-Content-Type-application-json"><a href="#一、post-请求-Content-Type-application-json" class="headerlink" title="一、post 请求 (Content-Type: application/json)"></a>一、post 请求 (Content-Type: application/json)</h2><ol><li><p><code>c = request.get_data()</code></p><p>  可以获取未经处理过的原始数据而不管内容类型,如果数据格式是json的，则取得的是json字符串，排序和请求参数一致</p></li><li><p><code>c =request.get_json()</code></p><p>  将请求参数做了处理，得到的是字典格式的，因此排序会打乱依据字典排序规则</p></li><li><p><code>c = request.data</code></p><p>  可以获取未经处理过的原始数据，如果数据格式是json的，则取得的是json字符串，排序和请求参数一致</p></li><li><p><code>c = request.json</code></p><p>  刚开始使用的时候以为是一个方法这样调用request.json()然后报错如下：<br>  Content-Type: application/json时报错’dict’ object is not callable<br>  原来是个属性，因此这样使用request.json,就能正常使用了总结如下：<br>  将请求参数做了处理，得到的是字典格式的，因此排序会打乱依据字典排序规则</p></li></ol><h2 id="二、get请求"><a href="#二、get请求" class="headerlink" title="二、get请求"></a>二、get请求</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.args.get(<span class="string">'key'</span>) <span class="comment"># 可以获取到单个的值，</span></span><br><span class="line">requestValues = request.args <span class="comment"># 可以获取get请求的所有参数返回值是ImmutableMultiDict类型,</span></span><br><span class="line">requestValues.to_dict() <span class="comment">#将获得的参数转换为字典</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Celery任务状态报错一例</title>
      <link href="/python/celery-exc-type-error.html"/>
      <url>/python/celery-exc-type-error.html</url>
      <content type="html"><![CDATA[<p>Celery 中定义FAILURE状态时，报错：<code>KeyError: &#39;exc_type&#39;</code>，完整内容大致如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(task.state)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/usr/local/lib/python3.6/site-packages/celery/result.py"</span>, line <span class="number">471</span>, <span class="keyword">in</span> state</span><br><span class="line">    <span class="keyword">return</span> self._get_task_meta()[<span class="string">'status'</span>]</span><br><span class="line">  File <span class="string">"/usr/local/lib/python3.6/site-packages/celery/result.py"</span>, line <span class="number">410</span>, <span class="keyword">in</span> _get_task_meta</span><br><span class="line">    <span class="keyword">return</span> self._maybe_set_cache(self.backend.get_task_meta(self.id))</span><br><span class="line">  File <span class="string">"/usr/local/lib/python3.6/site-packages/celery/backends/base.py"</span>, line <span class="number">359</span>, <span class="keyword">in</span> get_task_meta</span><br><span class="line">    meta = self._get_task_meta_for(task_id)</span><br><span class="line">  File <span class="string">"/usr/local/lib/python3.6/site-packages/celery/backends/base.py"</span>, line <span class="number">674</span>, <span class="keyword">in</span> _get_task_meta_for</span><br><span class="line">    <span class="keyword">return</span> self.decode_result(meta)</span><br><span class="line">  File <span class="string">"/usr/local/lib/python3.6/site-packages/celery/backends/base.py"</span>, line <span class="number">278</span>, <span class="keyword">in</span> decode_result</span><br><span class="line">    <span class="keyword">return</span> self.meta_from_decoded(self.decode(payload))</span><br><span class="line">  File <span class="string">"/usr/local/lib/python3.6/site-packages/celery/backends/base.py"</span>, line <span class="number">274</span>, <span class="keyword">in</span> meta_from_decoded</span><br><span class="line">    meta[<span class="string">'result'</span>] = self.exception_to_python(meta[<span class="string">'result'</span>])</span><br><span class="line">  File <span class="string">"/usr/local/lib/python3.6/site-packages/celery/backends/base.py"</span>, line <span class="number">248</span>, <span class="keyword">in</span> exception_to_python</span><br><span class="line">    from_utf8(exc[<span class="string">'exc_type'</span>]), __name__)</span><br><span class="line">KeyError: <span class="string">'exc_type'</span></span><br></pre></td></tr></table></figure><p>这个报错主要是<code>meta</code>字段中缺少<code>exc_type</code>和<code>exc_message</code>关键字导致的，在<code>meta</code>中添加这两个关键字即可消除报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.task(bind=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'Some error'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        self.update_state(</span><br><span class="line">            state=states.FAILURE,</span><br><span class="line">            meta=&#123;</span><br><span class="line">                <span class="string">'exc_type'</span>: type(ex).__name__,</span><br><span class="line">                <span class="string">'exc_message'</span>: traceback.format_exc().split(<span class="string">'\n'</span>)</span><br><span class="line">                <span class="string">'custom'</span>: <span class="string">'...'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">raise</span> Ignore()</span><br></pre></td></tr></table></figure><p>需要注意的是，在使用返回response时就不能再使用task.info来返回内容了，需要使用如下文件返回：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> tasks</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>task = tasks.task.s().delay()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(task.state)</span><br><span class="line"><span class="string">'FAILURE'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(task.info)</span><br><span class="line">ValueError(<span class="string">'Traceback (most recent call last):'</span>, <span class="string">'  File "/app/tasks.py", line 16, in task'</span>, <span class="string">"    raise ValueError('some exception')"</span>, <span class="string">'ValueError: some exception'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(task.backend.get(task.backend.get_key_for_task(task.id)))</span><br><span class="line"><span class="string">b'&#123;"status": "FAILURE", "result": &#123;"exc_type": "ValueError", "exc_message": ["Traceback (most recent call last):", "  File \\"/app/tasks.py\\", line 16, in task", "    raise ValueError(\'some exception\')", "ValueError: some exception", ""], "custom": "..."&#125;, "traceback": null, "children": [], "task_id": "d2f60111-aec6-4c58-83a7-24f0edb7ac5f"&#125;'</span></span><br><span class="line">Custom state</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Celery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hbase Rowkey设计规范参考</title>
      <link href="/bigdata/hbase-rowkey-rules.html"/>
      <url>/bigdata/hbase-rowkey-rules.html</url>
      <content type="html"><![CDATA[<p>HBase是三维有序存储的，通过rowkey（行键），column key（column family和qualifier）和TimeStamp（时间戳）这个三个维度可以对HBase中的数据进行快速定位。</p><p>HBase中rowkey可以唯一标识一行记录，在HBase查询的时候，有以下几种方式：</p><ol><li>通过get方式，指定rowkey获取唯一一条记录</li><li>通过scan方式，设置startRow和stopRow参数进行范围匹配</li><li>全表扫描，即直接扫描整张表中所有行记录</li></ol><h2 id="rowkey长度原则"><a href="#rowkey长度原则" class="headerlink" title="rowkey长度原则"></a>rowkey长度原则</h2><a id="more"></a><p>rowkey是一个二进制码流，可以是任意字符串，最大长度 <em>64kb</em> ，实际应用中一般为10-100bytes，以 <code>byte[]</code> 形式保存，一般设计成定长。</p><p>建议越短越好，不要超过16个字节，原因如下：</p><ol><li>数据的持久化文件HFile中是按照KeyValue存储的，如果rowkey过长，比如超过100字节，1000w行数据，光rowkey就要占用100*1000w=10亿个字节，将近1G数据，这样会极大影响HFile的存储效率；</li><li>MemStore将缓存部分数据到内存，如果rowkey字段过长，内存的有效利用率就会降低，系统不能缓存更多的数据，这样会降低检索效率。</li><li>目前操作系统都是64位系统，内存8字节对齐，控制在16个字节，8字节的整数倍利用了操作系统的最佳特性。</li></ol><h2 id="rowkey散列原则"><a href="#rowkey散列原则" class="headerlink" title="rowkey散列原则"></a>rowkey散列原则</h2><p>如果rowkey按照时间戳的方式递增，不要将时间放在二进制码的前面，建议将rowkey的高位作为散列字段，由程序随机生成，低位放时间字段，这样将提高数据均衡分布在每个RegionServer，以实现负载均衡的几率。如果没有散列字段，首字段直接是时间信息，所有的数据都会集中在一个RegionServer上，这样在数据检索的时候负载会集中在个别的RegionServer上，造成热点问题，会降低查询效率。</p><h2 id="rowkey唯一原则"><a href="#rowkey唯一原则" class="headerlink" title="rowkey唯一原则"></a>rowkey唯一原则</h2><p>必须在设计上保证其唯一性，rowkey是按照字典顺序排序存储的，因此，设计rowkey的时候，要充分利用这个排序的特点，将经常读取的数据存储到一块，将最近可能会被访问的数据放到一块。</p><h2 id="什么是热点"><a href="#什么是热点" class="headerlink" title="什么是热点"></a>什么是热点</h2><p>HBase中的行是按照rowkey的字典顺序排序的，这种设计优化了scan操作，可以将相关的行以及会被一起读取的行存取在临近位置，便于scan。然而糟糕的rowkey设计是热点的源头。 热点发生在大量的client直接访问集群的一个或极少数个节点（访问可能是读，写或者其他操作）。大量访问会使热点region所在的单个机器超出自身承受能力，引起性能下降甚至region不可用，这也会影响同一个RegionServer上的其他region，由于主机无法服务其他region的请求。 设计良好的数据访问模式以使集群被充分，均衡的利用。</p><p>为了避免写热点，设计rowkey使得不同行在同一个region，但是在更多数据情况下，数据应该被写入集群的多个region，而不是一个。</p><p>下面是一些常见的避免热点的方法以及它们的优缺点：</p><h4 id="加盐"><a href="#加盐" class="headerlink" title="加盐"></a>加盐</h4><p>这里所说的加盐不是密码学中的加盐，而是在rowkey的前面增加随机数，具体就是给rowkey分配一个随机前缀以使得它和之前的rowkey的开头不同。分配的前缀种类数量应该和你想使用数据分散到不同的region的数量一致。加盐之后的rowkey就会根据随机生成的前缀分散到各个region上，以避免热点。</p><h4 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h4><p>哈希会使同一行永远用一个前缀加盐。哈希也可以使负载分散到整个集群，但是读却是可以预测的。使用确定的哈希可以让客户端重构完整的rowkey，可以使用get操作准确获取某一个行数据</p><h4 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h4><p>第三种防止热点的方法时反转固定长度或者数字格式的rowkey。这样可以使得rowkey中经常改变的部分（最没有意义的部分）放在前面。这样可以有效的随机rowkey，但是牺牲了rowkey的有序性。</p><p>反转rowkey的例子以手机号为rowkey，可以将手机号反转后的字符串作为rowkey，这样的就避免了以手机号那样比较固定开头导致热点问题</p><h4 id="时间戳反转"><a href="#时间戳反转" class="headerlink" title="时间戳反转"></a>时间戳反转</h4><p>一个常见的数据处理问题是快速获取数据的最近版本，使用反转的时间戳作为rowkey的一部分对这个问题十分有用，可以用 <code>Long.Max_Value - timestamp</code> 追加到key的末尾，例如 <code>[key][reverse_timestamp]</code> , <code>[key]</code> 的最新值可以通过scan [key]获得[key]的第一条记录，因为HBase中rowkey是有序的，第一条记录是最后录入的数据。</p><p>比如需要保存一个用户的操作记录，按照操作时间倒序排序，在设计rowkey的时候，可以这样设计</p><p>[userId反转][Long.Max_Value - timestamp]，在查询用户的所有操作记录数据的时候，直接指定反转后的userId，startRow是[userId反转][000000000000],stopRow是[userId反转][Long.Max_Value - timestamp]</p><p>如果需要查询某段时间的操作记录，startRow是[user反转][Long.Max_Value - 起始时间]，stopRow是[userId反转][Long.Max_Value - 结束时间]</p><p>其他一些建议</p><ul><li>尽量减少行和列的大小在HBase中，value永远和它的key一起传输的。当具体的值在系统间传输时，它的rowkey，列名，时间戳也会一起传输。如果你的rowkey和列名很大，甚至可以和具体的值相比较，那么你将会遇到一些有趣的问题。HBase storefiles中的索引（有助于随机访问）最终占据了HBase分配的大量内存，因为具体的值和它的key很大。可以增加block大小使得storefiles索引再更大的时间间隔增加，或者修改表的模式以减小rowkey和列名的大小。压缩也有助于更大的索引。</li><li>列族尽可能越短越好，最好是一个字符</li><li>冗长的属性名虽然可读性好，但是更短的属性名存储在HBase中会更好</li></ul>]]></content>
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Hbase </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zookeeper选举机制</title>
      <link href="/bigdata/zookeeper-election-rules.html"/>
      <url>/bigdata/zookeeper-election-rules.html</url>
      <content type="html"><![CDATA[<h2 id="选择机制中的概念"><a href="#选择机制中的概念" class="headerlink" title="选择机制中的概念"></a>选择机制中的概念</h2><h3 id="服务器ID"><a href="#服务器ID" class="headerlink" title="服务器ID"></a>服务器ID</h3><p>比如有三台服务器，编号分别是1,2,3。</p><blockquote><p>编号越大在选择算法中的权重越大。</p></blockquote><h3 id="数据ID（或事务ID）"><a href="#数据ID（或事务ID）" class="headerlink" title="数据ID（或事务ID）"></a>数据ID（或事务ID）</h3><p>服务器中存放的最大数据ID.</p><blockquote><p>值越大说明数据越新，在选举算法中数据越新权重越大。</p></blockquote><h3 id="逻辑时钟"><a href="#逻辑时钟" class="headerlink" title="逻辑时钟"></a>逻辑时钟</h3><a id="more"></a><p>或者叫投票的次数，同一轮投票过程中的逻辑时钟值是相同的。每投完一次票这个数据就会增加，然后与接收到的其它服务器返回的投票信息中的数值相比，根据不同的值做出不同的判断。</p><h3 id="选举状态"><a href="#选举状态" class="headerlink" title="选举状态"></a>选举状态</h3><ul><li>LOOKING，竞选状态。</li><li>FOLLOWING，随从状态，同步leader状态，参与投票。</li><li>OBSERVING，观察状态,同步leader状态，不参与投票。</li><li>LEADING，领导者状态。</li></ul><h2 id="选举消息内容"><a href="#选举消息内容" class="headerlink" title="选举消息内容"></a>选举消息内容</h2><p>在投票完成后，需要将投票信息发送给集群中的所有服务器，它包含如下内容。</p><ul><li>服务器ID</li><li>数据ID</li><li>逻辑时钟</li><li>选举状态</li></ul><hr><p>以下内容摘自<br><a href="https://blog.csdn.net/chengyuqiang/article/details/79190061" target="_blank" rel="noopener">https://blog.csdn.net/chengyuqiang/article/details/79190061</a> </p><h4 id="Zookeeper集群初始化启动时Leader选举"><a href="#Zookeeper集群初始化启动时Leader选举" class="headerlink" title="Zookeeper集群初始化启动时Leader选举"></a>Zookeeper集群初始化启动时Leader选举</h4><p>若进行Leader选举，则至少需要两台机器，这里选取3台机器组成的服务器集群为例。<br>初始化启动期间Leader选举流程如下图所示<br><img src="https://img-blog.csdn.net/20180128213955030?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmd5dXFpYW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="初始化启动时Leader选举"><br>在集群初始化阶段，当有一台服务器ZK1启动时，其单独无法进行和完成Leader选举，当第二台服务器ZK2启动时，此时两台机器可以相互通信，每台机器都试图找到Leader，于是进入Leader选举过程。选举过程开始，过程如下：</p><ol><li><strong>每个Server发出一个投票。</strong> 由于是初始情况，ZK1和ZK2都会将自己作为Leader服务器来进行投票，每次投票会包含所推举的服务器的myid和ZXID，使用(myid, ZXID)来表示，此时ZK1的投票为(1, 0)，ZK2的投票为(2, 0)，然后各自将这个投票发给集群中其他机器。</li><li><strong>接受来自各个服务器的投票。</strong>集群的每个服务器收到投票后，首先判断该投票的有效性，如检查是否是本轮投票、是否来自LOOKING状态的服务器。</li><li><strong>处理投票。</strong> 针对每一个投票，服务器都需要将别人的投票和自己的投票进行比较，规则如下：<ul><li>优先检查ZXID。ZXID比较大的服务器优先作为Leader。</li><li>如果ZXID相同，那么就比较myid。myid较大的服务器作为Leader服务器。</li></ul></li></ol><p>对于ZK1而言，它的投票是(1, 0)，接收ZK2的投票为(2, 0)，首先会比较两者的ZXID，均为0，再比较myid，此时ZK2的myid最大，于是ZK2胜。ZK1更新自己的投票为(2, 0)，并将投票重新发送给ZK2。 </p><ol start="4"><li><strong>统计投票。</strong> 每次投票后，服务器都会统计投票信息，判断是否已经有过半机器接受到相同的投票信息，对于ZK1、ZK2而言，都统计出集群中已经有两台机器接受了(2, 0)的投票信息，此时便认为已经选出ZK2作为Leader。 </li><li><strong>改变服务器状态。</strong> 一旦确定了Leader，每个服务器就会更新自己的状态，如果是Follower，那么就变更为FOLLOWING，如果是Leader，就变更为LEADING。当新的Zookeeper节点ZK3启动时，发现已经有Leader了，不再选举，直接将直接的状态从LOOKING改为FOLLOWING。</li></ol><h4 id="Zookeeper集群运行期间Leader重新选"><a href="#Zookeeper集群运行期间Leader重新选" class="headerlink" title="Zookeeper集群运行期间Leader重新选"></a>Zookeeper集群运行期间Leader重新选</h4><p>在Zookeeper运行期间，如果Leader节点挂了，那么整个Zookeeper集群将暂停对外服务，进入新一轮Leader选举。<br>假设正在运行的有ZK1、ZK2、ZK3三台服务器，当前Leader是ZK2，若某一时刻Leader挂了，此时便开始Leader选举。选举过程如下图所示。<br><img src="https://img-blog.csdn.net/20180128214003138?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmd5dXFpYW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="运行期间Leader重新选"></p><ol><li>变更状态。Leader挂后，余下的非Observer服务器都会讲自己的服务器状态变更为LOOKING，然后开始进入Leader选举过程 </li><li>每个Server会发出一个投票。在运行期间，每个服务器上的ZXID可能不同，此时假定ZK1的ZXID为124，ZK3的ZXID为123；在第一轮投票中，ZK1和ZK3都会投自己，产生投票(1, 124)，(3, 123)，然后各自将投票发送给集群中所有机器。</li><li>接收来自各个服务器的投票。与启动时过程相同。 </li><li>处理投票。与启动时过程相同，由于ZK1事务ID大，ZK1将会成为Leader。</li><li>统计投票。与启动时过程相同。</li><li>改变服务器的状态。与启动时过程相同</li></ol>]]></content>
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> 集群 </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用Ansible Playbook批量部署node_exporter</title>
      <link href="/devops/deploy-node-exporter-by-ansible.html"/>
      <url>/devops/deploy-node-exporter-by-ansible.html</url>
      <content type="html"><![CDATA[<p>之前有翻译过一系列Grafana配置Graphite的文章。<a href="https://1byte.pro/monitoring/graphite.html">传送门</a></p><p>在用过Prometheus之后，发现Prometheus配合Grafana也是天造的一对，以设的一双。</p><p>对于服务器基础指标监控而言，Prometheus通过node_exporter来收集数据做为数据源,提供了各种与硬件和内核相关的详细指标。</p><p>下面分享一个我正在使用的Ansible Playbook，用于批量部署node_exporter到多个目标主机。<br><a id="more"></a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">yourservers</span></span><br><span class="line"><span class="attr">  user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  gather_facts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">    - user:</span> <span class="string">"prometheus"</span></span><br><span class="line"><span class="attr">    - group:</span> <span class="string">"prometheus"</span></span><br><span class="line"><span class="attr">    - node_exporter_package:</span> <span class="string">"node_exporter-0.16.0.linux-amd64"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - group:</span> <span class="string">name=&#123;&#123;</span> <span class="string">group&#125;&#125;</span> <span class="string">state=present</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Add</span> <span class="string">user</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">    user:</span> <span class="string">name=&#123;&#123;</span> <span class="string">user</span> <span class="string">&#125;&#125;</span> <span class="string">shell=/sbin/nologin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - file:</span> <span class="string">path=/usr/local/prometheus</span> <span class="string">owner=&#123;&#123;</span> <span class="string">user&#125;&#125;</span> <span class="string">group=&#123;&#123;</span> <span class="string">group</span> <span class="string">&#125;&#125;</span> <span class="string">mode=750</span> <span class="string">state=directory</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Sync</span> <span class="string">files</span></span><br><span class="line"><span class="attr">    copy:</span> <span class="string">src=&#123;&#123;</span> <span class="string">item.src</span> <span class="string">&#125;&#125;</span> <span class="string">dest=&#123;&#123;</span> <span class="string">item.dest</span> <span class="string">&#125;&#125;</span> <span class="string">owner=&#123;&#123;</span> <span class="string">user&#125;&#125;</span> <span class="string">group=&#123;&#123;</span> <span class="string">group</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    with_items:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">&#123;src:</span> <span class="string">"node_exporter.service"</span><span class="string">,</span> <span class="attr">dest:</span> <span class="string">"/usr/lib/systemd/system"</span><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Unpack</span> <span class="string">package</span></span><br><span class="line"><span class="attr">    unarchive:</span> <span class="string">src=&#123;&#123;</span> <span class="string">node_exporter_package</span> <span class="string">&#125;&#125;.tar.gz</span> <span class="string">dest=/usr/local/prometheus</span> <span class="string">owner=&#123;&#123;</span> <span class="string">user</span> <span class="string">&#125;&#125;</span> <span class="string">group=&#123;&#123;</span> <span class="string">group</span> <span class="string">&#125;&#125;</span> <span class="string">creates=/usr/local/prometheus/node_exporter</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Rename</span> <span class="string">the</span> <span class="string">path</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">mv</span> <span class="string">/usr/local/prometheus/&#123;&#123;</span> <span class="string">node_exporter_package</span> <span class="string">&#125;&#125;</span> <span class="string">/usr/local/prometheus/node_exporter</span> <span class="string">creates=/usr/local/prometheus/node_exporter</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - file:</span> <span class="string">path=/usr/local/prometheus/node_exporter</span> <span class="string">owner=&#123;&#123;</span> <span class="string">user&#125;&#125;</span> <span class="string">group=&#123;&#123;</span> <span class="string">group</span> <span class="string">&#125;&#125;</span> <span class="string">mode=750</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Start</span> <span class="string">service</span> <span class="string">prometheus,</span> <span class="string">if</span> <span class="string">not</span> <span class="string">running</span></span><br><span class="line"><span class="attr">    service:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">node_exporter.service</span></span><br><span class="line"><span class="attr">      state:</span> <span class="string">started</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：软件采用的是提前下载至本地然后同步到目标主机的方式，也是线上部署最为稳妥的方式。</p></blockquote><p>Grafana美图赏析：<br><img src="/images/monitor/Grafana.png" alt="Grafana Screenshot"></p>]]></content>
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Monitor </tag>
            
            <tag> Ansible </tag>
            
            <tag> Playbook </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spark性能优化之foreach与foreachPartition</title>
      <link href="/bigdata/foreach-forearchpartition.html"/>
      <url>/bigdata/foreach-forearchpartition.html</url>
      <content type="html"><![CDATA[<p>首先，我们对比一下<code>foreachPartition</code>和<code>foreach</code>两个方法的实现，有什么不同的地方：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreach</span></span>(f: <span class="type">T</span> =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = withScope &#123;</span><br><span class="line">  <span class="keyword">val</span> cleanF = sc.clean(f)</span><br><span class="line">  sc.runJob(<span class="keyword">this</span>, (iter: <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; iter.foreach(cleanF))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreachPartition</span></span>(f: <span class="type">Iterator</span>[<span class="type">T</span>] =&gt; <span class="type">Unit</span>): <span class="type">Unit</span> = withScope &#123;</span><br><span class="line">  <span class="keyword">val</span> cleanF = sc.clean(f)</span><br><span class="line">  sc.runJob(<span class="keyword">this</span>, (iter: <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; cleanF(iter))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>2个方法，参数都是一个函数文本，不同的是foreach当中，函数文本希望的参数是T，也就是RDD当中的元素类型；foreachPartition当中，函数文本希望的参数是<code>Iterator[T]</code>，也就是一个partition。</p><p>而在内部实现上，其实是大同小异的。对于foreachPartition而言，直接在各个partition上运行传入的函数文本；而对于foreach而言，是把传入的函数文本，交给各个partition的foreach去执行。<br>我们查看一些spark性能优化指南，会提到<code>用foreachPartition替代foreach，有助于性能的提高</code>。那么我们要怎样来理解这句话呢？看看下面这段代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rdd.foreach &#123; x =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> dbClient = <span class="keyword">new</span> <span class="type">DBClient</span></span><br><span class="line"></span><br><span class="line">    dbClient.ins(x)</span><br><span class="line"></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>在上面这段代码当中，针对RDD当中的每一条数据，都会new一个db client，这样的效率，显然是无比底下的。正确的写法应该是这个样子的：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rdd.foreachPartition &#123; part =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> dbClient = <span class="keyword">new</span> <span class="type">DBClient</span></span><br><span class="line"></span><br><span class="line">    part.foreach&#123; x =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        dbClient.ins(x)</span><br><span class="line"></span><br><span class="line">    &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>那么这种写法究竟好在哪里，还是要从spark的核心概念开始讲起，我们都知道spark是一个分布式的实时计算系统，而RDD是分布式计算的基础，而partition分区又是这个当中的关键，比如我们搭建一个<code>3*4core</code>的spark集群，对于一个大任务而言，我们往往是希望有12个线程一起来完成这个任务，用下面的代码来构建rdd就能够达到我们的目的：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd = sc.textFile(<span class="string">"hdfs://master:9000/woozoom/mavlink1.log"</span>, <span class="number">12</span>)</span><br></pre></td></tr></table></figure></p><p>注意第二个参数12，代表着构建出来的rdd的分区数量。之后，<code>rdd.foreachPartition</code>，spark集群会把12个分区分别交给12个线程来分别进行处理。结合上面的代码，dbClient 会在每个线程当中分别构建，会有12个db client被构建。</p><p>那么有没有另一种可能性，我们只构建一个db client，12个线程都用这一个db client来执行数据库操作，像下面这样：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> dbClient = <span class="keyword">new</span> <span class="type">DBClient</span></span><br><span class="line"></span><br><span class="line">rdd.foreach &#123; x =&gt; &#123;   </span><br><span class="line"></span><br><span class="line">    dbClient.ins(x)</span><br><span class="line"></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>要这么写，需要有2个前提：</p><ol><li>dbClient 是线程安全的</li><li>dbClient 实现了java的序列化接口。而在很多情况下，例如在对hbase进行访问的时候，这两个条件都是不满足的。</li></ol><h4 id="Partition数量影响及调整"><a href="#Partition数量影响及调整" class="headerlink" title="Partition数量影响及调整"></a>Partition数量影响及调整</h4><p>下面我们讨论一下Partition数量的影响以及合适的值</p><h5 id="Partition数量的影响"><a href="#Partition数量的影响" class="headerlink" title="Partition数量的影响"></a>Partition数量的影响</h5><ol><li>Partition数量太少 </li></ol><ul><li>太少的影响显而易见，就是资源不能充分利用，例如local模式下，有16core，但是Partition数量仅为8的话，有一半的core没利用到。</li></ul><ol start="2"><li>Partition数量太多 </li></ol><ul><li>太多，资源利用没什么问题，但是导致task过多，task的序列化和传输的时间开销增大。</li></ul><h5 id="Partition调整"><a href="#Partition调整" class="headerlink" title="Partition调整"></a>Partition调整</h5><ol><li>repartition </li></ol><ul><li>reparation是coalesce(numPartitions, shuffle = true)，repartition不仅会调整Partition数，也会将Partitioner修改为hashPartitioner，产生shuffle操作。</li></ul><ol start="2"><li>coalesce </li></ol><ul><li>coalesce函数可以控制是否shuffle，但当shuffle为false时，只能减小Partition数，无法增大。</li></ul>]]></content>
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kafka与Flume区别</title>
      <link href="/devops/kafka-flume.html"/>
      <url>/devops/kafka-flume.html</url>
      <content type="html"><![CDATA[<p>Kafka 与 Flume 在很多方面有相似性。以下是评估两个系统的一些建议：</p><ol><li><p>Kafka 是一个通用型系统。你可以有许多的生产者和消费者分享多个主题。相反地，Flume 被设计成特定用途的工作，特定地向 HDFS 和 HBase 发送出去。Flume 为了更好地为 HDFS 服务而做了特定的优化，并且与 Hadoop 的安全体系整合在了一起。基于这样的结论，Hadoop 开发商 Cloudera 推荐如果数据需要被多个应用程序消费的话，推荐使用 Kafka，如果数据只是面向 Hadoop 的，可以使用 Flume。</p></li><li><p>Flume 拥有许多配置的来源 (sources) 和存储池 (sinks)。然后，Kafka 拥有的是非常小的生产者和消费者环境体系，Kafka 社区并不是非常支持这样。如果你的数据来源已经确定，不需要额外的编码，那你可以使用 Flume 提供的 sources 和 sinks，反之，如果你需要准备自己的生产者和消费者，那你需要使用 Kafka。</p></li><li><p>Flume 可以在拦截器里面实时处理数据。这个特性对于过滤数据非常有用。Kafka 需要一个外部系统帮助处理数据。</p></li><li><p>无论是 Kafka 或是 Flume，两个系统都可以保证不丢失数据。然后，Flume 不会复制事件。相应地，即使我们正在使用一个可以信赖的文件通道，如果 Flume agent 所在的这个节点宕机了，你会失去所有的事件访问能力直到你修复这个受损的节点。使用 Kafka 的管道特性不会有这样的问题。</p></li><li><p>Flume 和 Kafka 可以一起工作的。如果你需要把流式数据从 Kafka 转移到 Hadoop，可以使用 Flume 代理 (agent)，将 kafka 当作一个来源 (source)，这样可以从 Kafka 读取数据到 Hadoop。你不需要去开发自己的消费者，你可以使用 Flume 与 Hadoop、HBase 相结合的特性，使用 Cloudera Manager 平台监控消费者，并且通过增加过滤器的方式处理数据。</p></li></ol>]]></content>
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
            <tag> Flume </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scala异常获取一例</title>
      <link href="/coding/scala-exception-handler.html"/>
      <url>/coding/scala-exception-handler.html</url>
      <content type="html"><![CDATA[<p>在处理第11行读文件时，由于数据文件出现的不规律，在指定日期内可能存在日志文件不存在的情况，这里需要处理下异常：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readLog</span></span>(sc: <span class="type">SparkContext</span>, startDate: <span class="type">String</span>, endDate: <span class="type">String</span>, logNames: <span class="type">List</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">  <span class="keyword">val</span> dateLst = <span class="type">DateUtils</span>.getDateListBetweenTwoDate(startDate, endDate)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> logRdd = sc.makeRDD(<span class="type">List</span>[<span class="type">String</span>]())</span><br><span class="line">  <span class="keyword">for</span> (date &lt;- dateLst) &#123;</span><br><span class="line">    <span class="keyword">val</span> year = date.substring(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">val</span> month = date.substring(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">val</span> day = date.substring(<span class="number">6</span>, <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">for</span> (logName &lt;- logNames) &#123;</span><br><span class="line">       <span class="keyword">val</span> logRdd = logRdd.union(</span><br><span class="line">        <span class="keyword">try</span> &#123;sc.textFile(<span class="string">s"cosn://fuge/mid-data/fuge/ssp/bid-log/<span class="subst">$year</span>/<span class="subst">$month</span>/<span class="subst">$day</span>/<span class="subst">$&#123;logName&#125;</span>*"</span>)</span><br><span class="line">          .map(x =&gt; x.split(<span class="string">"\\|"</span>, <span class="number">-1</span>))</span><br><span class="line">          .filter(x =&gt; x.length &gt;= <span class="number">2</span> &amp;&amp; (x(<span class="number">1</span>).trim == <span class="string">"6"</span> || x(<span class="number">1</span>).trim == <span class="string">"0"</span>)).map(_.toString) <span class="comment">// 0和6为请求成功的状态码</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">          <span class="keyword">case</span> _: <span class="type">Exception</span> =&gt; sc.makeRDD(<span class="type">List</span>[<span class="type">String</span>]())</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  logRdd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>  <p>  最初犯的错误是把try catch放在了union语句的上层，导致异常是被抓取了，但是RDD却未被正确赋值。</p><p>  除了上述方法，还可通过重写文件读取接口实现异常的捕获与RDD的正常赋值：</p>  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">textFileFromObjectStorage</span></span>(path: <span class="type">String</span>, numOfCoalesce: <span class="type">Int</span> = <span class="number">0</span>): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">  <span class="keyword">val</span> data = sc.newAPIHadoopFile(path</span><br><span class="line">    , classOf[<span class="type">EmptiableTextInputFormat</span>]</span><br><span class="line">    , classOf[<span class="type">LongWritable</span>]</span><br><span class="line">    , classOf[<span class="type">Text</span>]</span><br><span class="line">    , sc.hadoopConfiguration)</span><br><span class="line">    .map &#123;</span><br><span class="line">      x =&gt;</span><br><span class="line">        x._2.toString</span><br><span class="line">    &#125;</span><br><span class="line">  numOfCoalesce <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span> =&gt;</span><br><span class="line">      data</span><br><span class="line">    <span class="keyword">case</span> _ =&gt;</span><br><span class="line">      data.coalesce(numOfCoalesce)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>newAPIHadoopFile说明，参考：<a href="https://spark.apache.org/docs/2.0.2/api/java/org/apache/spark/SparkContext.html#newAPIHadoopFile%28java.lang.String,%20java.lang.Class,%20java.lang.Class,%20java.lang.Class,%20org.apache.hadoop.conf.Configuration%29" target="_blank" rel="noopener">newAPIHadoopFile Doc</a></p>]]></content>
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>红芯浏览器下载</title>
      <link href="/opinions/fake-chrome.html"/>
      <url>/opinions/fake-chrome.html</url>
      <content type="html"><![CDATA[<p>宣称打破美国垄断、自主研发出国产浏览器内核的<code>红芯浏览器</code>，却被质疑使用的是<code>谷歌Chrome内核</code>，而且是两年前的旧版内核（详细剖析可参考：<a href="https://mp.weixin.qq.com/s/8N-a68KEeJQM3FzQi_eYyg" target="_blank" rel="noopener">融资2.5亿的国产浏览器之光，竟然只是谷歌浏览器换了层皮？</a></p><a id="more"></a><p>红芯联合创始人高婧对中新网回应称，网上文章断章取义，安装包里之所以有Chrome文件，因为本来就是基于开源的Chrome架构。但红芯依然是自主可控的国产内核，因为有智能感知渲染等其他方面的创新。至于安装包为何下线，是因为技术部启动应急预案，开始<strong>自查</strong>。</p><p>原始安装包被官网下架，号称是<strong>自查</strong>，简直就是此地无银三百两。</p><p><strong><code>红</code></strong>装虽然穿在身，我心依然是开源心。</p><blockquote><p> 注：Chromium 是开源软件，并无国籍之说，Chrome是闭源的。Chromium 遵守 BSD 许可协议，要求类库/软件的文档和版权声明中包含原 BSD 协议，<code>红芯</code>显然没有做到</p></blockquote><hr><p>为防止官方永久撤包耍赖不认帐，这里提供一个下载地址，有兴趣的以可下载下来体验一下，这可以是<code>高阶版</code>的Chrome皮肤哦，而且还支持早已被所有主流浏览器抛弃的XP系统呢!!!!</p><p>下载：<a href="https://pan.baidu.com/s/1YvYboYttCxuZwx6uZGQgXQ" target="_blank" rel="noopener">红芯浏览器官方版</a></p><p>如果文件被封或不可用，请<a href="mailto:none@canstop.me" target="_blank" rel="noopener">邮件联系我</a>!</p><hr><h4 id="最后，衷心希望早日用上更多更好的真正国产核心软件。"><a href="#最后，衷心希望早日用上更多更好的真正国产核心软件。" class="headerlink" title="最后，衷心希望早日用上更多更好的真正国产核心软件。"></a>最后，衷心希望早日用上更多更好的<strong>真正国产</strong>核心软件。</h4>]]></content>
      
      <categories>
          
          <category> Opinions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红芯浏览器 </tag>
            
            <tag> Shame </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gitlab问题小结</title>
      <link href="/issues/gitlab-trouble-shooting.html"/>
      <url>/issues/gitlab-trouble-shooting.html</url>
      <content type="html"><![CDATA[<h3 id="supervise-redis-sleep-长时间卡死"><a href="#supervise-redis-sleep-长时间卡死" class="headerlink" title="supervise_redis_sleep 长时间卡死"></a>supervise_redis_sleep 长时间卡死</h3><p>解决方案：</p><p>1、按住CTRL+C强制结束；</p><p>2、运行：sudo systemctl restart gitlab-runsvdir；</p><p>3、再次执行：sudo gitlab-ctl reconfigure<br><a id="more"></a><br>默认root密码：5iveL!fe</p><h3 id="shell端口更改"><a href="#shell端口更改" class="headerlink" title="shell端口更改"></a>shell端口更改</h3><p>/etc/gitlab/gitlab.rb<br>ssh_port</p><h3 id="ssh端口无法更新，重启失败"><a href="#ssh端口无法更新，重启失败" class="headerlink" title="ssh端口无法更新，重启失败"></a>ssh端口无法更新，重启失败</h3><p>禁用selinux后，重启即可</p><h3 id="invalid-byte-sequence-in-US-ASCII"><a href="#invalid-byte-sequence-in-US-ASCII" class="headerlink" title="invalid byte sequence in US-ASCII"></a>invalid byte sequence in US-ASCII</h3><p>将下面一行添加到.bashrc 就ok了</p><p><code>export RUBYOPT=&quot;-U -Ku -E utf-8:utf-8&quot;</code></p><h3 id="gitblab界面上不显示推送记录"><a href="#gitblab界面上不显示推送记录" class="headerlink" title="gitblab界面上不显示推送记录"></a>gitblab界面上不显示推送记录</h3><p>此故障是通常见于从备份恢复后且前后版本不一致情况（现有版本新于之前版本），具体原因是由于新老版本所用的hook机制不一样</p><p>老版本会到/home/git/gitlab-shell/hooks下面去找<br>新版本会到/opt/gitlab/embedded/service/gitlab-shell/hooks下面去找</p><p>如果是新版本将git home软链到/home/git就可以了</p>]]></content>
      
      <categories>
          
          <category> Issues </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitlab </tag>
            
            <tag> Issue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>无GUI的CentOS上使用Selenium+Chrome</title>
      <link href="/python/chromium-on-centos-for-selenium.html"/>
      <url>/python/chromium-on-centos-for-selenium.html</url>
      <content type="html"><![CDATA[<p>客户的网站上的监测代码最近连续两次在网站更新时被清除掉，导致无法正常获取网站访问数据，影响到后续大数据分析。</p><p>为解决这个问题，决定使用Python <code>Selenium</code>模块来实现网站按钮模拟点击，同时监测我们后台是否能正常收到，以此来判断网站按钮监测代码是否有正常部署。</p><p><code>Selenium</code>很好用很强大，开发和部署也都很简单，是自动化测试非常好的工具，但是问题是我们需要在无GUI的服务器上进行部署，这就牵涉到在无GUI的服务器上安装浏览器的问题，我这里选择的是Chrome。</p><hr><p>下面简单分享一个部署过程中遇到的坑，也当作是总结。<br><a id="more"></a></p><h3 id="一、安装Chromium"><a href="#一、安装Chromium" class="headerlink" title="一、安装Chromium"></a>一、安装Chromium</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y epel-<span class="keyword">release</span></span><br><span class="line">yum <span class="keyword">install</span> -y chromium</span><br></pre></td></tr></table></figure><p>检测安装结果</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ll /usr/bin/ | grep chrom</span></span><br><span class="line">-rwxr-xr-x.  <span class="number"> 1 </span>root root   <span class="number"> 8136192 </span>Jun <span class="number"> 7 </span>17:02 chromedriver</span><br><span class="line">lrwxrwxrwx.  <span class="number"> 1 </span>root root        <span class="number"> 47 </span>Aug <span class="number"> 6 </span>16:51 chromium -&gt; /usr/lib64/chromium-browser/chromium-browser.sh</span><br></pre></td></tr></table></figure><h3 id="二、安装XVFB"><a href="#二、安装XVFB" class="headerlink" title="二、安装XVFB"></a>二、安装XVFB</h3><p><code>XVFB</code>全称为：<code>virtual framebuffer X server for X Version 11</code>，可以直接处理Windows的图形化功能，并且不会把图像输出到屏幕上，也就是说，就算你的电脑没有启动Xwindow，也依然也可以执行图形化软件。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install </span><span class="keyword">xorg-x11-fonts* </span>Xvfb -y</span><br></pre></td></tr></table></figure><h3 id="三、编写浏览器启动脚本"><a href="#三、编写浏览器启动脚本" class="headerlink" title="三、编写浏览器启动脚本"></a>三、编写浏览器启动脚本</h3><p>利用xvfb来启动Chromium，并设置参数</p><p><code>vim /usr/bin/xvfb-chromium</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">_kill_procs</span></span>() &#123;</span><br><span class="line">  <span class="built_in">kill</span> -TERM <span class="variable">$chromium</span></span><br><span class="line">  <span class="built_in">wait</span> <span class="variable">$chromium</span></span><br><span class="line">  <span class="built_in">kill</span> -TERM <span class="variable">$xvfb</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setup a trap to catch SIGTERM and relay it to child processes</span></span><br><span class="line"><span class="built_in">trap</span> _kill_procs SIGTERM</span><br><span class="line"></span><br><span class="line">XVFB_WHD=<span class="variable">$&#123;XVFB_WHD:-1280x720x16&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start Xvfb</span></span><br><span class="line">Xvfb :99 -ac -screen 0 <span class="variable">$XVFB_WHD</span> -nolisten tcp &amp;</span><br><span class="line">xvfb=$!</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> DISPLAY=:99</span><br><span class="line"></span><br><span class="line">chromium --no-sandbox  --<span class="built_in">disable</span>-dev-shm-usage --headless --<span class="built_in">disable</span>-gp <span class="variable">$@</span> &amp;</span><br><span class="line">chromium=$!</span><br><span class="line"></span><br><span class="line"><span class="built_in">wait</span> <span class="variable">$chromium</span></span><br><span class="line"><span class="built_in">wait</span> <span class="variable">$xvfb</span></span><br></pre></td></tr></table></figure><blockquote><p>以上代码参考：<a href="https://github.com/mark-adams/docker-chromium-xvfb/blob/master/images/base/xvfb-chromium" target="_blank" rel="noopener">https://github.com/mark-adams/docker-chromium-xvfb/blob/master/images/base/xvfb-chromium</a> ，修改了第20行，添加了三个参数预防一些异常报错</p></blockquote><p>为脚本添加可执行权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x <span class="regexp">/usr/</span>bin<span class="regexp">/xvfb-chromium</span></span><br></pre></td></tr></table></figure><h3 id="四、更改链接，调整命令"><a href="#四、更改链接，调整命令" class="headerlink" title="四、更改链接，调整命令"></a>四、更改链接，调整命令</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ln -s <span class="regexp">/usr/</span>lib64<span class="regexp">/chromium-browser/</span>chromium-browser.sh <span class="regexp">/usr/</span>bin/chromium</span><br><span class="line">rm -rf <span class="regexp">/usr/</span>bin/chromium-browser</span><br><span class="line">ln -s <span class="regexp">/usr/</span>bin<span class="regexp">/xvfb-chromium /</span>usr<span class="regexp">/bin/</span>chromium-browser</span><br><span class="line">ln -s <span class="regexp">/usr/</span>bin<span class="regexp">/xvfb-chromium /</span>usr<span class="regexp">/bin/</span>google-chrome</span><br></pre></td></tr></table></figure><p>检测调整结果，显示如下所示，即表示正确</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ll /usr/bin/ | grep chrom*</span></span><br><span class="line">-rwxr-xr-x.  <span class="number"> 1 </span>root root   <span class="number"> 8136192 </span>Jun <span class="number"> 7 </span>17:02 chromedriver</span><br><span class="line">lrwxrwxrwx.  <span class="number"> 1 </span>root root        <span class="number"> 47 </span>Aug <span class="number"> 6 </span>16:51 chromium -&gt; /usr/lib64/chromium-browser/chromium-browser.sh</span><br><span class="line">lrwxrwxrwx.  <span class="number"> 1 </span>root root        <span class="number"> 22 </span>Aug <span class="number"> 6 </span>16:51 chromium-browser -&gt; /usr/bin/xvfb-chromium</span><br><span class="line">lrwxrwxrwx.  <span class="number"> 1 </span>root root        <span class="number"> 22 </span>Aug <span class="number"> 6 </span>16:51 google-chrome -&gt; /usr/bin/xvfb-chromium</span><br><span class="line">-rwxr-xr-x.  <span class="number"> 1 </span>root root       <span class="number"> 422 </span>Aug <span class="number"> 7 </span>10:37 xvfb-chromium</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://hub.docker.com/r/markadams/chromium-xvfb/~/dockerfile/" target="_blank" rel="noopener">https://hub.docker.com/r/markadams/chromium-xvfb/~/dockerfile/</a></p></blockquote><h3 id="五、遇到的问题"><a href="#五、遇到的问题" class="headerlink" title="五、遇到的问题"></a>五、遇到的问题</h3><p>最学见的报错：</p><p><code>selenium.common.exceptions.WebDriverException: Message: unknown error: DevToolsActivePort file doesn&#39;t exist</code></p><p>这个报错由两个原因导致<br>第一个是原因是参数设置问题，可直接添加相关参数即可<br>在Python代码中添加：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chrome_options = <span class="keyword">Options</span>()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-dev-shm-usage'</span>)</span><br><span class="line">driver = webdriver.Chrome(<span class="string">'/path/to/your_chrome_driver_dir/chromedriver'</span>,chrome_options=chrome_options)</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://github.com/heroku/heroku-buildpack-google-chrome/issues/46" target="_blank" rel="noopener">https://github.com/heroku/heroku-buildpack-google-chrome/issues/46</a></p></blockquote><p>或者把上述参数添加在本文每三步的脚本中</p><p>另一个会导致这个报错的原因是在编写完第三的步脚本<code>/usr/bin/xvfb-chromium</code>后没有给其赋予可执行权限把致。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Selenium </tag>
            
            <tag> Chromium </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>V</title>
      <link href="/voice/v.html"/>
      <url>/voice/v.html</url>
      <content type="html"><![CDATA[<p>V’s speech is recognized by the analysts at Smith Change the World Incorporated as one of the most influential speeches of the near future.<br><a id="more"></a></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">”Good evening, London. Allow <span class="keyword">me</span> <span class="keyword">first</span> <span class="keyword">to</span> apologize <span class="keyword">for</span> this interruption. I do, like many <span class="keyword">of</span> you, appreciate <span class="keyword">the</span> comforts <span class="keyword">of</span> <span class="keyword">every</span> <span class="built_in">day</span> routine — <span class="keyword">the</span> security <span class="keyword">of</span> <span class="keyword">the</span> familiar, <span class="keyword">the</span> tranquility <span class="keyword">of</span> repetition. I enjoy them <span class="keyword">as</span> much <span class="keyword">as</span> any bloke. But <span class="keyword">in</span> <span class="keyword">the</span> spirit <span class="keyword">of</span> commemoration, whereby those important events <span class="keyword">of</span> <span class="keyword">the</span> past, usually associated <span class="keyword">with</span> someone's death <span class="keyword">or</span> <span class="keyword">the</span> <span class="keyword">end</span> <span class="keyword">of</span> <span class="keyword">some</span> awful bloody struggle, are celebrated <span class="keyword">with</span> a nice holiday, I thought we could mark this November <span class="keyword">the</span> <span class="number">5</span>th, a <span class="built_in">day</span> <span class="keyword">that</span> <span class="keyword">is</span> sadly no longer remembered, <span class="keyword">by</span> taking <span class="keyword">some</span> <span class="built_in">time</span> <span class="keyword">out of</span> our daily lives <span class="keyword">to</span> sit down <span class="keyword">and</span> have a little chat. There are <span class="keyword">of</span> course those who do <span class="keyword">not</span> want us <span class="keyword">to</span> speak. I suspect even now, orders are being shouted <span class="keyword">into</span> telephones, <span class="keyword">and</span> men <span class="keyword">with</span> guns will soon be <span class="keyword">on</span> their way. Why? Because <span class="keyword">while</span> <span class="keyword">the</span> truncheon may be used <span class="keyword">in</span> lieu <span class="keyword">of</span> conversation, <span class="built_in">words</span> will always retain their power. Words offer <span class="keyword">the</span> means <span class="keyword">to</span> meaning, <span class="keyword">and</span> <span class="keyword">for</span> those who will listen, <span class="keyword">the</span> enunciation <span class="keyword">of</span> truth. And <span class="keyword">the</span> truth <span class="keyword">is</span>, there <span class="keyword">is</span> something terribly wrong <span class="keyword">with</span> this country, <span class="keyword">isn't</span> there? Cruelty <span class="keyword">and</span> injustice, intolerance <span class="keyword">and</span> oppression. And <span class="keyword">where</span> once you had <span class="keyword">the</span> freedom <span class="keyword">to</span> object, <span class="keyword">to</span> think <span class="keyword">and</span> speak <span class="keyword">as</span> you saw fit, you now have censors <span class="keyword">and</span> systems <span class="keyword">of</span> surveillance coercing your conformity <span class="keyword">and</span> soliciting your submission. How did this happen? Who's <span class="keyword">to</span> blame? Well certainly there are those more responsible than others, <span class="keyword">and</span> they will be held accountable, <span class="keyword">but</span> again truth be told, <span class="keyword">if</span> you're looking <span class="keyword">for</span> <span class="keyword">the</span> guilty, you need only look <span class="keyword">into</span> a mirror. I know why you did <span class="keyword">it</span>. I know you were afraid. Who wouldn't be? War, terror, disease. There were a myriad <span class="keyword">of</span> problems which conspired <span class="keyword">to</span> corrupt your reason <span class="keyword">and</span> rob you <span class="keyword">of</span> your common sense. Fear got <span class="keyword">the</span> best <span class="keyword">of</span> you, <span class="keyword">and</span> <span class="keyword">in</span> your panic you turned <span class="keyword">to</span> <span class="keyword">the</span> now high chancellor, Adam Sutler. He promised you order, he promised you peace, <span class="keyword">and</span> all he demanded <span class="keyword">in</span> <span class="literal">return</span> was your silent, obedient consent. Last night I sought <span class="keyword">to</span> <span class="keyword">end</span> <span class="keyword">that</span> silence. Last night I destroyed <span class="keyword">the</span> Old Bailey, <span class="keyword">to</span> remind this country <span class="keyword">of</span> what <span class="keyword">it</span> has forgotten. More than <span class="number">400</span> years ago a great citizen wished <span class="keyword">to</span> embed <span class="keyword">the</span> <span class="keyword">fifth</span> <span class="keyword">of</span> November forever <span class="keyword">in</span> our memory. His hope was <span class="keyword">to</span> remind <span class="keyword">the</span> world <span class="keyword">that</span> fairness, justice, <span class="keyword">and</span> freedom are more than <span class="built_in">words</span>, they are perspectives. So <span class="keyword">if</span> you've seen nothing, <span class="keyword">if</span> <span class="keyword">the</span> crimes <span class="keyword">of</span> this government remain unknown <span class="keyword">to</span> you <span class="keyword">then</span> I would suggest <span class="keyword">that</span> you allow <span class="keyword">the</span> <span class="keyword">fifth</span> <span class="keyword">of</span> November <span class="keyword">to</span> pass unmarked. But <span class="keyword">if</span> you see what I see, <span class="keyword">if</span> you feel <span class="keyword">as</span> I feel, <span class="keyword">and</span> <span class="keyword">if</span> you would seek <span class="keyword">as</span> I seek, <span class="keyword">then</span> I ask you <span class="keyword">to</span> stand <span class="keyword">beside</span> <span class="keyword">me</span> one <span class="built_in">year</span> <span class="keyword">from</span> tonight, outside <span class="keyword">the</span> gates <span class="keyword">of</span> Parliament, <span class="keyword">and</span> together we shall give them a <span class="keyword">fifth</span> <span class="keyword">of</span> November <span class="keyword">that</span> shall never, ever be forgot<span class="string">" ("</span>V <span class="keyword">for</span> Vendetta (Film)”).</span><br></pre></td></tr></table></figure><h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h4><p><code>”Because while the truncheon may be used in lieu of conversation, words will always retain their power&quot; (&quot;V for Vendetta (Film)”).</code></p><ul><li>Comparable to the Thought Police in 1984 or the Gestapo from Nazi Germany. Both used force to create submission, but both powers feared words more than anything else. The fought to destroy any writings that conflicted with beliefs.</li><li>The Department of Homeland Security in Little Brother uses force in order to create control over the city of San Francisco. Marcus realizes that words do indeed have more power than brute force, thus manipulating the Xnet in a form of nonviolent protest. Gandhi used the same tactics in his protest against Great Britain, he is quoted, “Non-violence is the greatest force at the disposal of mankind. It is mightier than the mightiest weapon of destruction devised by the ingenuity of man.” (“V for Vendetta (Film)”)</li></ul><p><code>”And where once you had the freedom to object, to think and speak as you saw fit, you now have censors and systems of surveillance coercing your conformity and soliciting your submission&quot; (&quot;V for Vendetta (Film)”).</code></p><ul><li>As in both Little Brother and 1984, the ability to think or reject is removed by the government. Both are then replaced with, “censors and systems of surveillance” (“V for Vendetta (Film)”).</li><li>The “soliciting” of and individual’s submission is a main theme in 1984, as Winston find himself “solicited” by Big Brother. The posters and telescreens are constant reminders of his presence, and as Winston says, “The presence of Big Brother was not just known, you were reminded of it ever time you walked outside your home” (Orwell, 1984, 101).</li></ul><p><code>”if you&#39;re looking for the guilty, you need only look into a mirror.&quot; (&quot;V for Vendetta (Film)”)</code></p><ul><li>During the collapse of societies, there is always the attempt to create a scapegoat. Usually the scapegoat is the minorities of the community. An example of this would be in Hitler’s Germany. Hitler was able to create an accepted blame on the Jews for the depression, and used the support behind the scapegoat in order to rise to power. After Hitler had been defeated, many citizen of Germany claimed that they had no idea of what was happening to the Jews and other minorities in their society. Yet, they were just blinded by their faith in Hitler and were unable to blame themselves.</li><li>In society today, people look for someone to blame for economic, social, and political problems. All of these problems are cause by each and every individual in the society. Whether it be overspending, close-mindedness, or even the lack of participation in a democratic government.</li></ul><p><code>”His hope was to remind the world that fairness, justice, and freedom are more than words, they are perspectives.&quot; (&quot;V for Vendetta (Film)”)</code></p><ul><li>Regardless of how much censorship is implemented on a society, fairness, justice, and freedom will be everlasting. Perspectives cannot be destroyed and cannot be forgotten.</li></ul>]]></content>
      
      <categories>
          
          <category> Voice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> V </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hadoop集群中banlancer用法简介</title>
      <link href="/bigdata/hadoop-banlancer.html"/>
      <url>/bigdata/hadoop-banlancer.html</url>
      <content type="html"><![CDATA[<p>随着时间的推移，各个datanode上的块会分布得越来越不均衡。不均衡的Hadoop集群会降低MapReduce的本地性，导致部分 datanode 相对更为繁忙。我们应尽力避免出现这种情况。</p><p>均衡器（loadbalancer）程序是一个 Hadoop 守护进程，它将块从忙碌的 datanode 移到 相对空闲的 datanode，从而重新分配块。同进坚持复本放置策略，将复本分散到不同机架，以降低数据损失概率。它不断移动块，直到集群达到均衡，即每个 datanode 的使用率（该节点上已使用的空间与空间容量之间的比率）和集群的使用率（集群中已使用的空间与集群的空间容量之间的比率）非常接近，差距不超过给定的阀值（默认为10%）。可调用下面指令启动均衡器：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$path_to_hadoop</span>/bin/start-balancer<span class="selector-class">.sh</span> -t <span class="number">10%</span></span><br></pre></td></tr></table></figure></p><ul><li>-t 选项指定阈值，以判定集群是否均衡。这个标记是可选的；若不使用，默认阈值是10%。在任何时刻，集群中都只运行一个均衡器。</li></ul><p>均衡器会一直运行，直到集群变均衡；之后，集群无法移动任何块，或与 namenode 失去联系。均衡器在标准日志目录中创建一个日志文件 ，记录每次重新分配过程（第次运行记录一行）。</p><p>为了降低集群负何、避免干扰其它用户，均衡器被设计为在后台运行。在不同节点之间复制数据的带宽也是受限的。默认值是很小的 1MB/s，可以通过 <code>hdfs-site.xml</code> 文件中 <code>df.balance.bandwidthPerSec</code> 属性指定（单位是字节）。</p>]]></content>
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> BigData </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx开启HTTPS反向代理访问Jira失败</title>
      <link href="/issues/jira-over-https.html"/>
      <url>/issues/jira-over-https.html</url>
      <content type="html"><![CDATA[<p>使用的Jira 版本：v7.1.1，之前一直是http访问，在买完证书，部署好https访问时，界面一直在提醒：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">We<span class="string">'ve detected a potential problem with JIRA'</span>s Dashboard configuration that your administrator can correct. Click here <span class="built_in">to</span> learn more</span><br><span class="line"> </span><br><span class="line">We<span class="string">'ve detected a potential problem with JIRA'</span>s Dashboard configuration that your administrator can correct. Hide</span><br><span class="line">Dashboard Diagnostics: Mismatched <span class="built_in">URL</span> Scheme</span><br><span class="line"> </span><br><span class="line">JIRA is reporting that <span class="keyword">it</span> is <span class="keyword">using</span> <span class="keyword">the</span> <span class="built_in">URL</span> scheme <span class="string">'http'</span>, which does <span class="keyword">not</span> match <span class="keyword">the</span> scheme used <span class="built_in">to</span> run these diagnostics, <span class="string">'https'</span>. This is known <span class="built_in">to</span> cause JIRA <span class="built_in">to</span> construct URLs <span class="keyword">using</span> <span class="keyword">an</span> incorrect hostname, which will <span class="built_in">result</span> <span class="keyword">in</span> errors <span class="keyword">in</span> <span class="keyword">the</span> dashboard, <span class="keyword">among</span> other issues.</span><br><span class="line"> </span><br><span class="line">The most common cause <span class="keyword">of</span> this is <span class="keyword">the</span> use <span class="keyword">of</span> <span class="keyword">a</span> reverse-proxy HTTP(S) server (often Apache <span class="keyword">or</span> IIS) <span class="keyword">in</span> front <span class="keyword">of</span> <span class="keyword">the</span> application server running JIRA. While this configuration is supported, some additional setup might be necessary <span class="keyword">in</span> order <span class="built_in">to</span> ensure that JIRA detects <span class="keyword">the</span> correct scheme.</span><br><span class="line"> </span><br><span class="line">The following articles describe <span class="keyword">the</span> issue <span class="keyword">and</span> <span class="keyword">the</span> steps you should take <span class="built_in">to</span> ensure that your web server <span class="keyword">and</span> app server are configured correctly:</span><br><span class="line"> </span><br><span class="line">    Gadgets <span class="built_in">do</span> <span class="keyword">not</span> display correctly <span class="keyword">after</span> upgrade <span class="built_in">to</span> JIRA <span class="number">4.0</span></span><br><span class="line">    Integrating JIRA <span class="keyword">with</span> Apache</span><br><span class="line">    Integrating JIRA <span class="keyword">with</span> Apache <span class="keyword">using</span> SSL</span><br><span class="line"> </span><br><span class="line">If you believe this diagnosis is <span class="keyword">in</span> error, <span class="keyword">or</span> you have <span class="keyword">any</span> other questions, please contact Atlassian Support.</span><br><span class="line"> </span><br><span class="line">Detailed Error</span><br><span class="line"> </span><br><span class="line">com.atlassian.gadgets.dashboard.internal.diagnostics.UrlSchemeMismatchException: Detected <span class="built_in">URL</span> scheme, <span class="string">'http'</span>, does <span class="keyword">not</span> match expected scheme <span class="string">'https'</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>经过多次尝试之后，发现一共需要修改两处。</p><p>第一处是修改系统界面中的BaseURL，把http换为https，如图:</p><p><img src="/images/jira/BaseURL.jpg" alt="BaseURL"></p><p>第二处是修改Jira自带的tomcat配置文件（默认位置：<code>/usr/local/atlassian/jira/conf/server.xml</code>）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    &lt;Service <span class="attribute">name</span>=<span class="string">"Catalina"</span>&gt;</span><br><span class="line">        &lt;Connector <span class="attribute">port</span>=<span class="string">"8080"</span></span><br><span class="line">                   <span class="attribute">maxThreads</span>=<span class="string">"150"</span></span><br><span class="line">                   <span class="attribute">minSpareThreads</span>=<span class="string">"25"</span></span><br><span class="line">                   <span class="attribute">maxSpareThreads</span>=<span class="string">"75"</span></span><br><span class="line">                   <span class="attribute">connectionTimeout</span>=<span class="string">"20000"</span></span><br><span class="line">                   <span class="attribute">enableLookups</span>=<span class="string">"false"</span></span><br><span class="line">                   <span class="attribute">maxHttpHeaderSize</span>=<span class="string">"8192"</span></span><br><span class="line">                   <span class="attribute">protocol</span>=<span class="string">"HTTP/1.1"</span></span><br><span class="line">                   <span class="attribute">useBodyEncodingForURI</span>=<span class="string">"true"</span></span><br><span class="line">                   <span class="attribute">redirectPort</span>=<span class="string">"8443"</span></span><br><span class="line">                   <span class="attribute">acceptCount</span>=<span class="string">"100"</span></span><br><span class="line">                   <span class="attribute">disableUploadTimeout</span>=<span class="string">"true"</span></span><br><span class="line"> </span><br><span class="line">&lt;!-- Lines added <span class="keyword">to</span> solve the URL scheme mismatch --&gt;</span><br><span class="line">                    <span class="attribute">scheme</span>=<span class="string">"https"</span></span><br><span class="line">                    <span class="attribute">proxyName</span>=<span class="string">"example.org"</span></span><br><span class="line">                    <span class="attribute">proxyPort</span>=<span class="string">"443"</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>把proxyName换成你的jira访问域名就可以了</p></blockquote>]]></content>
      
      <categories>
          
          <category> Issues </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jira </tag>
            
            <tag> Troubleshooting </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FreeIPA Client 端部署</title>
      <link href="/devops/install-freeipa-client.html"/>
      <url>/devops/install-freeipa-client.html</url>
      <content type="html"><![CDATA[<h3 id="新增IPA客户端主机"><a href="#新增IPA客户端主机" class="headerlink" title="新增IPA客户端主机"></a>新增IPA客户端主机</h3><h4 id="修改DNS服务器"><a href="#修改DNS服务器" class="headerlink" title="修改DNS服务器"></a>修改DNS服务器</h4><p>vim /etc/resolv.conf<br>把下面两行放最上面</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">search</span> <span class="selector-tag">bd</span><span class="selector-class">.example</span><span class="selector-class">.com</span><span class="selector-class">.cn</span></span><br><span class="line"><span class="selector-tag">nameserver</span> 192<span class="selector-class">.168</span><span class="selector-class">.2</span><span class="selector-class">.150</span></span><br></pre></td></tr></table></figure><h4 id="修改hosts文件中第二行旧的主机名（很重要）"><a href="#修改hosts文件中第二行旧的主机名（很重要）" class="headerlink" title="修改hosts文件中第二行旧的主机名（很重要）"></a>修改hosts文件中第二行旧的主机名（很重要）</h4><a id="more"></a><p>修改为：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.8</span> <span class="selector-tag">tracking8</span><span class="selector-class">.bd</span><span class="selector-class">.example</span><span class="selector-class">.com</span><span class="selector-class">.cn</span></span><br></pre></td></tr></table></figure></p><h4 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h4><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hostnamectl </span><span class="built_in">set-hostname</span> <span class="string">xxx.</span><span class="string">bd.</span><span class="string">example.</span><span class="string">com.</span><span class="string">cn</span></span><br></pre></td></tr></table></figure><h4 id="修改PS1变量"><a href="#修改PS1变量" class="headerlink" title="修改PS1变量"></a>修改PS1变量</h4><p>vim /etc/profile<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PS1</span>=<span class="string">"[\u@\h \W]\\$ "</span></span><br></pre></td></tr></table></figure></p><h4 id="安装ipa-client"><a href="#安装ipa-client" class="headerlink" title="安装ipa client"></a>安装ipa client</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ipa-client</span><br><span class="line"></span><br><span class="line">ipa-client-install --mkhomedir</span><br><span class="line"></span><br><span class="line">Realm: FUGETECH.COM.CN</span><br><span class="line">DNS Domain: example.com.cn</span><br><span class="line">IPA Server: ipa.example.com.cn</span><br><span class="line">BaseDN: <span class="attribute">dc</span>=example,dc=com,dc=cn</span><br></pre></td></tr></table></figure><h4 id="开放系统limit值"><a href="#开放系统limit值" class="headerlink" title="开放系统limit值"></a>开放系统limit值</h4><p>在文件<code>/etc/security/limits.conf</code>末尾追加：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>soft nofile 65535</span><br><span class="line"><span class="bullet">* </span>hard nofile 65535</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>soft    nproc   65535</span><br><span class="line"><span class="bullet">* </span>hard    nproc   65535</span><br></pre></td></tr></table></figure><h4 id="允许自动创建家目录-前面install时已创建，此处忽略"><a href="#允许自动创建家目录-前面install时已创建，此处忽略" class="headerlink" title="允许自动创建家目录(前面install时已创建，此处忽略)"></a>允许自动创建家目录(前面install时已创建，此处忽略)</h4><p>(如果安装时使用–mkhomedir选项，这一步可忽略)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authconfig --enablemkhomedir --update</span><br></pre></td></tr></table></figure></p><h4 id="admin被锁处理"><a href="#admin被锁处理" class="headerlink" title="admin被锁处理"></a>admin被锁处理</h4><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapmodify  -h localhost -D <span class="string">"uid=admin,cn=users,cn=accounts"</span> -ZZ -<span class="keyword">x</span> -W</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeIPA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FreeIPA Server 端部署</title>
      <link href="/devops/install-freeipa-server-on-centos.html"/>
      <url>/devops/install-freeipa-server-on-centos.html</url>
      <content type="html"><![CDATA[<h2 id="一、FreeIPA介绍"><a href="#一、FreeIPA介绍" class="headerlink" title="一、FreeIPA介绍"></a>一、FreeIPA介绍</h2><p>FreeIPA是Redhat公司推出的开源软件，是一款集成的安全信息管理解决方案。其特点如下：</p><ul><li>集成多种服务（389 Directory Server, MIT Kerberos, NTP, DNS, Dogtag certificate system, SSSD），简化安装配置</li><li>提供WEB、命令行两种管理工具，方便管理</li><li>多主复制，可扩展，高可用</li><li>接口丰富，支持CLI、 Web UI、 XMLRPC、JSONRPC API、Python SDK</li></ul><a id="more"></a><p><img src="/images/freeipa/free-ipa-server.png" alt="FreeIPA Server"></p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul><li>MIT KDC：IPA 认证的核心</li><li>389 Directory Server：轻量级目录访问</li><li>Dogtag Certificate System：一款认证系统,提供强大的安全框架来确保用户的身份以及通讯的私密性</li><li>SSSD：SSSD是红帽企业版Linux6中新加入的一个守护进程，该进程可以用来访问多种验证服务器，如LDAP，Kerberos等，并提供授权。SSSD是介于本地用户和数据存储之间的进程，本地客户端首先连接SSSD，再由SSSD联系外部资源提供者(一台远程服务器)</li></ul><h3 id="安装前检查："><a href="#安装前检查：" class="headerlink" title="安装前检查："></a>安装前检查：</h3><ul><li>使用ntp同步时间</li><li>防火墙关闭，或开放以下端口：TCP(80, 443,389, 636,88, 464) UDP(88, 464,123)</li><li>配置hosts文件，设置完全合格的主机名（如：192.168.1.1 freeipa.fugetech.com.cn  freeipa）</li></ul><h2 id="二、FreeIPA服务端安装"><a href="#二、FreeIPA服务端安装" class="headerlink" title="二、FreeIPA服务端安装"></a>二、FreeIPA服务端安装</h2><p>FreeIPA的安装比较简单，首先安装软件包：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> ipa-<span class="keyword">server</span> bind-dyndb-ldap ipa-<span class="keyword">server</span>-dns</span><br></pre></td></tr></table></figure><p>安装完成后，执行安装命令：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipa-<span class="keyword">server</span>-install</span><br></pre></td></tr></table></figure><p>开始安装：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">The <span class="built_in">log</span> <span class="built_in">file</span> <span class="keyword">for</span> this installation can be found <span class="keyword">in</span> /var/<span class="built_in">log</span>/ipaserver-install.<span class="built_in">log</span></span><br><span class="line">================================================================</span><br><span class="line">This program will <span class="keyword">set</span> up <span class="keyword">the</span> IPA Server.</span><br><span class="line">This includes:</span><br><span class="line">  * Configure a stand-alone CA (dogtag) <span class="keyword">for</span> certificate management</span><br><span class="line">  * Configure <span class="keyword">the</span> Network Time Daemon (ntpd)</span><br><span class="line">  * Create <span class="keyword">and</span> configure an instance <span class="keyword">of</span> Directory Server</span><br><span class="line">  * Create <span class="keyword">and</span> configure a Kerberos Key Distribution Center (KDC)</span><br><span class="line">  * Configure Apache (httpd)</span><br><span class="line">To accept <span class="keyword">the</span> default shown <span class="keyword">in</span> brackets, press <span class="keyword">the</span> Enter key.</span><br><span class="line">Enter <span class="keyword">the</span> fully qualified domain <span class="built_in">name</span> <span class="keyword">of</span> <span class="keyword">the</span> computer</span><br><span class="line"><span class="keyword">on</span> which you're setting up server software. Using <span class="keyword">the</span> form</span><br><span class="line">&lt;hostname&gt;.&lt;domainname&gt;</span><br><span class="line">Example: master1.douyu.com.</span><br><span class="line">Server host <span class="built_in">name</span> [master1.douyu.com]:       <span class="comment">#回车确认</span></span><br><span class="line"></span><br><span class="line">The domain <span class="built_in">name</span> has been determined based <span class="keyword">on</span> <span class="keyword">the</span> host <span class="built_in">name</span>.</span><br><span class="line">Please confirm <span class="keyword">the</span> domain <span class="built_in">name</span> [master1.douyu]: <span class="comment">#回车确认</span></span><br><span class="line"></span><br><span class="line">The kerberos protocol requires a Realm <span class="built_in">name</span> <span class="keyword">to</span> be defined.</span><br><span class="line">This <span class="keyword">is</span> typically <span class="keyword">the</span> domain <span class="built_in">name</span> converted <span class="keyword">to</span> uppercase.</span><br><span class="line">Please provide a realm <span class="built_in">name</span> [master1.douyu]:<span class="comment">#回车确认</span></span><br><span class="line"></span><br><span class="line">Certain directory server operations require an administrative user.</span><br><span class="line">This user <span class="keyword">is</span> referred <span class="keyword">to</span> <span class="keyword">as</span> <span class="keyword">the</span> Directory Manager <span class="keyword">and</span> has full access</span><br><span class="line"><span class="keyword">to</span> <span class="keyword">the</span> Directory <span class="keyword">for</span> system management tasks <span class="keyword">and</span> will be added <span class="keyword">to</span> <span class="keyword">the</span></span><br><span class="line">instance <span class="keyword">of</span> directory server created <span class="keyword">for</span> IPA.</span><br><span class="line">The password must be <span class="keyword">at</span> least <span class="number">8</span> <span class="built_in">characters</span> long.</span><br><span class="line"></span><br><span class="line">Directory Manager password:douyu123 <span class="comment">#设置活动目录管理密码</span></span><br><span class="line">Password (confirm):redn.net</span><br><span class="line">The IPA server requires an administrative user, named 'admin'.</span><br><span class="line">This user <span class="keyword">is</span> a regular system account used <span class="keyword">for</span> IPA server administration.</span><br><span class="line"></span><br><span class="line">IPA admin password:redn.net <span class="comment">#设置IPA admin管理密码</span></span><br><span class="line">Password (confirm):redn.net</span><br><span class="line">The IPA Master Server will be configured <span class="keyword">with</span>:</span><br><span class="line">Hostname:      master1.douyu.com</span><br><span class="line">IP address:    <span class="number">172.24</span><span class="number">.30</span><span class="number">.100</span></span><br><span class="line">Domain <span class="built_in">name</span>:   example.com</span><br><span class="line">Realm <span class="built_in">name</span>:    EXAMPLE.COM</span><br><span class="line">Continue <span class="keyword">to</span> configure <span class="keyword">the</span> system <span class="keyword">with</span> these values? [no]:yes    <span class="comment">#输入yes 确认配置</span></span><br><span class="line">The following operations may take <span class="keyword">some</span> minutes <span class="keyword">to</span> complete.</span><br><span class="line">Please wait <span class="keyword">until</span> <span class="keyword">the</span> prompt <span class="keyword">is</span> returned.</span><br><span class="line"></span><br><span class="line">…………………………<span class="comment">#等待安装完成</span></span><br><span class="line">Sample zone <span class="built_in">file</span> <span class="keyword">for</span> bind has been created <span class="keyword">in</span> /tmp/sample.zone.Jd9cwk.db</span><br><span class="line">Restarting <span class="keyword">the</span> web server</span><br><span class="line">==============================================================</span><br><span class="line">Setup complete</span><br><span class="line">Next steps:</span><br><span class="line">        <span class="number">1.</span> You must make sure these network ports are open:</span><br><span class="line">                TCP Ports:</span><br><span class="line">                  * <span class="number">80</span>, <span class="number">443</span>: HTTP/HTTPS</span><br><span class="line">                  * <span class="number">389</span>, <span class="number">636</span>: LDAP/LDAPS</span><br><span class="line">                  * <span class="number">88</span>, <span class="number">464</span>: kerberos</span><br><span class="line">                UDP Ports:</span><br><span class="line">                  * <span class="number">88</span>, <span class="number">464</span>: kerberos</span><br><span class="line">                  * <span class="number">123</span>: ntp</span><br><span class="line">        <span class="number">2.</span> You can now obtain a kerberos ticket using <span class="keyword">the</span> command: 'kinit admin'</span><br><span class="line">           This ticket will allow you <span class="keyword">to</span> use <span class="keyword">the</span> IPA tools (e.g., ipa user-add)</span><br><span class="line">           <span class="keyword">and</span> <span class="keyword">the</span> web user interface.</span><br><span class="line">Be sure <span class="keyword">to</span> <span class="keyword">back</span> up <span class="keyword">the</span> CA certificate stored <span class="keyword">in</span> /root/cacert.p12</span><br><span class="line">This <span class="built_in">file</span> <span class="keyword">is</span> required <span class="keyword">to</span> create replicas. The password <span class="keyword">for</span> this</span><br><span class="line"><span class="built_in">file</span> <span class="keyword">is</span> <span class="keyword">the</span> Directory Manager password</span><br></pre></td></tr></table></figure><p>安装完成后，打开浏览器，输入：https://<freeipa server ip>/ 地址，即可打开web管理界面。</freeipa></p>]]></content>
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeIPA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何写出健壮的 Bash 脚本</title>
      <link href="/devops/RobustnessOfShellScript.html"/>
      <url>/devops/RobustnessOfShellScript.html</url>
      <content type="html"><![CDATA[<p>许多人用Shell脚本完成一些简单任务，而且变成了他们生命的一部分。不幸的是，shell脚本在运行异常时会受到非常大的影响。在写脚本时将这类问题最小化是十分必要的。本文中我将介绍一些让bash脚本变得健壮的技术。</p><h4 id="使用set-u"><a href="#使用set-u" class="headerlink" title="使用set -u"></a>使用set -u</h4><p>你因为没有对变量初始化而使脚本崩溃过多少次？对于我来说，很多次。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chroot=<span class="variable">$1</span></span><br><span class="line">...</span><br><span class="line">rm -rf <span class="variable">$chroot</span>/usr/share/doc</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>如果上面的代码你没有给参数就运行，你不会仅仅删除掉chroot中的文档，而是将系统的所有文档都删除。那你应该做些什么呢？好在bash提供了<code>set -u</code>，当你使用未初始化的变量时，让bash自动退出。你也可以使用可读性更强一点的<code>set -o nounset</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash /tmp/shrink-chroot.sh</span><br><span class="line"><span class="variable">$chroot</span>=</span><br><span class="line">bash -u /tmp/shrink-chroot.sh</span><br><span class="line">/tmp/shrink-chroot.sh: line 3: <span class="variable">$1</span>: unbound variable</span><br></pre></td></tr></table></figure></p><h4 id="使用set-e"><a href="#使用set-e" class="headerlink" title="使用set -e"></a>使用set -e</h4><p>你写的每一个脚本的开始都应该包含<code>set -e</code>。这告诉bash一但有任何一个语句返回非真的值，则退出bash。使用-e的好处是避免错误滚雪球般的变成严重错误，能尽早的捕获错误。更加可读的版本：<code>set -o errexit</code></p><p>使用<code>-e</code>把你从检查错误中解放出来。如果你忘记了检查，bash会替你做这件事。不过你也没有办法使用<code>$?</code>来获取命令执行状态了，因为bash无法获得任何非0的返回值。你可以使用另一种结构：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"$?"</span>-ne 0]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">"command failed"</span>; <span class="built_in">exit</span> 1; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>可以替换成：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> || &#123; <span class="built_in">echo</span> <span class="string">"command failed"</span>; <span class="built_in">exit</span> 1; &#125;</span><br></pre></td></tr></table></figure></p><p>或者使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ! <span class="built_in">command</span>; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">"command failed"</span>; <span class="built_in">exit</span> 1; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>如果你必须使用返回非0值的命令，或者你对返回值并不感兴趣呢？你可以使用 <code>command || true</code> ，或者你有一段很长的代码，你可以暂时关闭错误检查功能，不过我建议你谨慎使用。</p><h4 id="set-e"><a href="#set-e" class="headerlink" title="set +e"></a>set +e</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">command1</span><br><span class="line">command2</span><br><span class="line"><span class="built_in">set</span> -e</span><br></pre></td></tr></table></figure><p>相关文档指出，bash默认返回管道中最后一个命令的值，也许是你不想要的那个。比如执行 false | true 将会被认为命令成功执行。如果你想让这样的命令被认为是执行失败，可以使用 <code>set -o pipefail</code></p><h4 id="程序防御-–-考虑意料之外的事"><a href="#程序防御-–-考虑意料之外的事" class="headerlink" title="程序防御 – 考虑意料之外的事"></a>程序防御 – 考虑意料之外的事</h4><p>你的脚本也许会被放到“意外”的账户下运行，像缺少文件或者目录没有被创建等情况。你可以做一些预防这些错误事情。比如，当你创建一个目录后，如果父目录不存在，mkdir 命令会返回一个错误。如果你创建目录时给mkdir命令加上-p选项，它会在创建需要的目录前，把需要的父目录创建出来。另一个例子是 rm 命令。如果你要删除一个不存在的文件，它会“吐槽”并且你的脚本会停止工作。（因为你使用了<code>-e</code>选项，对吧？）你可以使用<code>-f</code>选项来解决这个问题，在文件不存在的时候让脚本继续工作。</p><h4 id="准备好处理文件名中的空格"><a href="#准备好处理文件名中的空格" class="headerlink" title="准备好处理文件名中的空格"></a>准备好处理文件名中的空格</h4><p>有些人从在文件名或者命令行参数中使用空格，你需要在编写脚本时时刻记得这件事。你需要时刻记得用引号包围变量。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$filename</span> = <span class="string">"foo"</span> ];</span><br></pre></td></tr></table></figure></p><p>当$filename变量包含空格时就会挂掉。可以这样解决：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$filename</span>"</span> = <span class="string">"foo"</span> ];</span><br></pre></td></tr></table></figure></p><p>使用<code>$@</code>变量时，你也需要使用引号，因为空格隔开的两个参数会被解释成两个独立的部分。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">foo</span></span>() &#123; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$@</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>; <span class="keyword">done</span> &#125;; foo bar <span class="string">"baz quux"</span></span><br><span class="line">bar</span><br><span class="line">baz</span><br><span class="line">quux</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">foo</span></span>() &#123; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>; <span class="keyword">done</span> &#125;; foo bar <span class="string">"baz quux"</span></span><br><span class="line">bar</span><br><span class="line">baz quux</span><br></pre></td></tr></table></figure></p><p>我没有想到任何不能使用<code>&quot;$@&quot;</code>的时候，所以当你有疑问的时候，使用引号就没有错误。如果你同时使用find和xargs，你应该使用 <code>-print0</code>来让字符分割文件名，而不是换行符分割。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="string">"foo bar"</span></span><br><span class="line"></span><br><span class="line">find | xargs ls</span><br><span class="line"></span><br><span class="line">ls: ./foo: No such file or directory</span><br><span class="line"></span><br><span class="line">ls: bar: No such file or directory</span><br><span class="line"></span><br><span class="line">find -print0 | xargs -0 ls</span><br><span class="line"></span><br><span class="line">./foo bar</span><br></pre></td></tr></table></figure></p><h3 id="设置的陷阱"><a href="#设置的陷阱" class="headerlink" title="设置的陷阱"></a>设置的陷阱</h3><p>当你编写的脚本挂掉后，文件系统处于未知状态。比如锁文件状态、临时文件状态或者更新了一个文件后在更新下一个文件前挂掉。如果你能解决这些问题，无论是删除锁文件，又或者在脚本遇到问题时回滚到已知状态，你都是非常棒的。幸运的是，bash提供了一种方法，当bash接收到一个UNIX信号时，运行一个命令或者一个函数。可以使用trap命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">trap</span> <span class="built_in">command</span> signal [signal ...]</span><br></pre></td></tr></table></figure></p><p>你可以链接多个信号（列表可以使用kill -l获得），但是为了清理残局，我们只使用其中的三个：<code>INT</code>，<code>TERM</code>和<code>EXIT</code>。你可以使用<code>-as</code>来让traps恢复到初始状态。</p><p>信号描述<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INT ：Interrupt – 当有人使用Ctrl-C终止脚本时被触发</span><br><span class="line">TERM ：Terminate – 当有人使用<span class="built_in">kill</span>杀死脚本进程时被触发</span><br><span class="line">EXIT ：Exit – 这是一个伪信号，当脚本正常退出或者<span class="built_in">set</span> -e后因为出错而退出时被</span><br><span class="line">触发</span><br></pre></td></tr></table></figure></p><p>当你使用锁文件时，可以这样写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$lockfile</span> ]; <span class="keyword">then</span></span><br><span class="line">touch <span class="variable">$lockfile</span></span><br><span class="line">critical-section</span><br><span class="line">rm <span class="variable">$lockfile</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"critical-section is already running"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>当最重要的部分(critical-section)正在运行时，如果杀死了脚本进程，会发生什么呢？锁文件会被扔在那，而且你的脚本在它被删除以前再也不会运行了。解决方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$lockfile</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">" rm -f <span class="variable">$lockfile</span>; exit"</span> INT TERM EXIT</span><br><span class="line">touch <span class="variable">$lockfile</span></span><br><span class="line">critical-section</span><br><span class="line">rm <span class="variable">$lockfile</span></span><br><span class="line"><span class="built_in">trap</span> - INT TERM EXIT</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"critical-section is already running"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>现在当你杀死进程时，锁文件一同被删除。注意在trap命令中明确地退出了脚本，否则脚本会继续执行trap后面的命令。</p><h4 id="竟态条件"><a href="#竟态条件" class="headerlink" title="竟态条件"></a><a href="https://zh.wikipedia.org/wiki/%E7%AB%B6%E7%88%AD%E5%8D%B1%E5%AE%B3" target="_blank" rel="noopener">竟态条件</a></h4><p>在上面锁文件的例子中，有一个竟态条件是不得不指出的，它存在于判断锁文件和创建锁文件之间。一个可行的解决方法是使用IO重定向和bash的<code>noclobber([wikipedia](https://zh.wikipedia.org/wiki/%E7%AB%B6%E7%88%AD%E5%8D%B1%E5%AE%B3))</code>模式，重定向到不存在的文件。我们可以这么做：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">set</span> -o noclobber; <span class="built_in">echo</span> <span class="string">"$$"</span> &gt; <span class="string">"<span class="variable">$lockfile</span>"</span>) 2&gt; /dev/null;</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">'rm -f "$lockfile"; exit $?'</span> INT TERM EXIT</span><br><span class="line">critical-section</span><br><span class="line">rm -f <span class="string">"<span class="variable">$lockfile</span>"</span></span><br><span class="line"><span class="built_in">trap</span> - INT TERM EXIT</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Failed to acquire lockfile: <span class="variable">$lockfile</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"held by <span class="variable">$(cat $lockfile)</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>更复杂一点儿的问题是你要更新一大堆文件，当它们更新过程中出现问题时，你是否能让脚本挂得更加优雅一些。你想确认那些正确更新了，哪些根本没有变化。比如你需要一个添加用户的脚本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_to_passwd <span class="variable">$user</span></span><br><span class="line">cp -a /etc/skel /home/<span class="variable">$user</span></span><br><span class="line">chown <span class="variable">$user</span> /home/<span class="variable">$user</span> -R</span><br></pre></td></tr></table></figure></p><p>当磁盘空间不足或者进程中途被杀死，这个脚本就会出现问题。在这种情况下，你也许希望用户账户不存在，而且他的文件也应该被删除。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">rollback</span></span>() &#123;</span><br><span class="line">del_from_passwd <span class="variable">$user</span></span><br><span class="line"><span class="keyword">if</span> [ -e /home/<span class="variable">$user</span> ]; <span class="keyword">then</span></span><br><span class="line">rm -rf /home/<span class="variable">$user</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">trap</span> rollback INT TERM EXIT</span><br><span class="line">add_to_passwd <span class="variable">$user</span></span><br><span class="line"></span><br><span class="line">cp -a /etc/skel /home/<span class="variable">$user</span></span><br><span class="line">chown <span class="variable">$user</span> /home/<span class="variable">$user</span> -R</span><br><span class="line"></span><br><span class="line"><span class="built_in">trap</span> - INT TERM EXIT</span><br></pre></td></tr></table></figure></p><p>在脚本最后需要使用trap关闭rollback调用，否则当脚本正常退出的时候rollback将会被调用，那么脚本等于什么都没做。</p><h4 id="保持原子化"><a href="#保持原子化" class="headerlink" title="保持原子化"></a>保持原子化</h4><p>又是你需要一次更新目录中的一大堆文件，比如你需要将URL重写到另一个网站的域名。你也许会写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(find /var/www -<span class="built_in">type</span> f -name <span class="string">"*.html"</span>); <span class="keyword">do</span></span><br><span class="line">    perl -pi -e <span class="string">'s/www.example.net/www.example.com/'</span> <span class="variable">$file</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>如果修改到一半是脚本出现问题，一部分使用<a href="http://www.example.com，而另一部分使用www.example.net。你可以使用备份和trap解决，但在升级过程中你的网站URL是不一致的。" target="_blank" rel="noopener">www.example.com，而另一部分使用www.example.net。你可以使用备份和trap解决，但在升级过程中你的网站URL是不一致的。</a></p><p>解决方法是将这个改变做成一个原子操作。先对数据做一个副本，在副本中更新URL，再用副本替换掉现在工作的版本。你需要确认副本和工作版本目录在同一个磁盘分区上，这样你就可以利用Linux系统的优势，它移动目录仅仅是更新目录指向的inode节点。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cp -a /var/www /var/www-tmp</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(find /var/www-tmp -<span class="built_in">type</span> -f -name <span class="string">"*.html"</span>); <span class="keyword">do</span></span><br><span class="line">perl -pi -e <span class="string">'s/www.example.net/www.example.com/'</span> <span class="variable">$file</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">mv /var/www /var/www-old</span><br><span class="line">mv /var/www-tmp /var/www</span><br></pre></td></tr></table></figure></p><p>这意味着如果更新过程出问题，线上系统不会受影响。线上系统受影响的时间降低为两次mv操作的时间，这个时间非常短，因为文件系统仅更新inode而不用真正的复制所有的数据。</p><p>这种技术的缺点是你需要两倍的磁盘空间，而且那些长时间打开文件的进程需要比较长的时间才能升级到新文件版本，建议更新完成后重新启动这些进程。对于apache服务器来说这不是问题，因为它每次都重新打开文件。你可以使用lsof命令查看当前正打开的文件。优势是你有了一个先前的备份，当你需要还原时，它就派上用场了。 </p>]]></content>
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
            <tag> Robustness </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ansible基础-Playbook入门</title>
      <link href="/devops/ansible-basics-playbook.html"/>
      <url>/devops/ansible-basics-playbook.html</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1377560-04a1e244789486fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">难度指数: 4星(满星5星)</span></span><br><span class="line"><span class="section">技术指数: 5星(满星5星)</span></span><br><span class="line"><span class="section">理论指数: 4星(满星5星)</span></span><br><span class="line"><span class="section">面向人群: 自动化运维&amp;运维开发</span></span><br></pre></td></tr></table></figure><h1 id="1-Playbook简介"><a href="#1-Playbook简介" class="headerlink" title="1.    Playbook简介"></a>1.    Playbook简介</h1><p>像很多其它配置文件管理方法一样，Ansible使用一种比较直白的方法来描述自己的任务配置文件。<br>Ansible 的任务配置文件被称之为“playbook”，我们可以称之为“剧本”。每一出剧本（playbook）中都包含一系列的任务，这每个任务在ansible中又被称为一出“戏剧”（play）。一个剧本（playbook）中包含多出戏剧（play），这很容易理解。</p><p>为了便于理解，再给大家举个栗子~<br><a id="more"></a><br>NAB球队教练手里都有一个叫战术板的东西，每次暂停，主教练都会在战术板上布置一系列战术（playbook），球员在场上做出一系列的跑动和相互掩护来完成这个战术，这其中每一个跑位和掩护就可以被称之为“play”。</p><p><img src="http://upload-images.jianshu.io/upload_images/1377560-fe4ab100e519ed90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>在Ansible中，我们就充当编剧的角色，亲自编写剧本（一系列的服务器操作），让一出出精彩的戏剧（play）巧妙配合，完成对服务器的一系列精确控制。</p><h2 id="1-1-Playbook语法简介"><a href="#1-1-Playbook语法简介" class="headerlink" title="1.1    Playbook语法简介"></a>1.1    Playbook语法简介</h2><p>Playbook采用一种可读性很高的且容易被人类阅读的语法的YAML语法编写，YAML: “YAML Ain’t a Markup Language”（YAML不是一种置标语言）。该语言在被开发时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种置标语言），格式如下所示：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">house:</span></span><br><span class="line"><span class="symbol">  family:</span></span><br><span class="line"><span class="symbol">    name:</span> Doe</span><br><span class="line"><span class="symbol">    parents:</span></span><br><span class="line">      - John</span><br><span class="line">      - Jane</span><br><span class="line"><span class="symbol">    children:</span></span><br><span class="line">      - Paul</span><br><span class="line">      - Mark</span><br><span class="line">      - Simone</span><br><span class="line"><span class="symbol">  address:</span></span><br><span class="line"><span class="symbol">    number:</span> <span class="number">34</span></span><br><span class="line"><span class="symbol">    street:</span> Main Street</span><br><span class="line"><span class="symbol">    city:</span> Nowheretown</span><br><span class="line"><span class="symbol">  zipcode:</span> <span class="number">12345</span></span><br></pre></td></tr></table></figure></p><h2 id="1-2-YAML简介"><a href="#1-2-YAML简介" class="headerlink" title="1.2    YAML简介"></a>1.2    YAML简介</h2><h3 id="1-2-1-YAML特性"><a href="#1-2-1-YAML特性" class="headerlink" title="1.2.1 YAML特性"></a>1.2.1 YAML特性</h3><ul><li>1    YAML的可读性好</li><li>2    YAML和脚本语言的交互性好</li><li>3    YAML使用实现语言的数据类型</li><li>4    YAML有一个一致的信息模型</li><li>5    YAML易于实现<h3 id="1-2-2-YAML语法"><a href="#1-2-2-YAML语法" class="headerlink" title="1.2.2 YAML语法"></a>1.2.2 YAML语法</h3></li><li>1    YAML使用可打印的Unicode字符，可使用UTF-8或UTF-16。</li><li>2    使用空白字符未文件缩排来表示结构；不过不能使用跳格字符。</li><li>3    注解由井字号( # )开始，可以出现在一行中的任何位置，而且范围只有一行(也就是一般所谓的单行注解)</li><li>4    每个清单成员以单行表示，并用短杠+空白( -   )起始。或使用方括号( [ ] )，并用逗号+空白( ,   )分开成员。</li><li>5    每个杂凑表的成员用冒号+空白( :   )分开键值和内容。或使用大括号( {   } )，并用逗号+空白( ,   )分开。 杂凑表的键值可以用问号 ( ? )起始，用来明确的表示多个词汇组成的键值。</li><li>6    字串平常并不使用引号，但必要的时候可以用双引号 ( “ )或单引号 ( ‘ )框住。使用双引号表示字串时，可用倒斜线( \ )开始的跳脱字符(这跟C语言类似)表示特殊字符。</li><li>7    区块的字串用缩排和修饰词(非必要)来和其他资料分隔，有新行保留(preserve)(使用符号 | )或新行折叠(flod)(使用符号 &gt; )两种方式。</li><li>8    在单一档案中，可用连续三个连字号(——)区分多个档案。另外，还有选择性的连续三个点号( … )用来表示档案结尾。</li><li>9    重复的内容可使从参考标记星号 ( * )复制到锚点标记( &amp; )。</li><li>10    指定格式可以使用两个惊叹号 ( !! )，后面接上名称。</li><li>11    档案中的单一文件可以使用指导指令，使用方法是百分比符号( % )。有两个指导指令<h1 id="2-Playbook实战"><a href="#2-Playbook实战" class="headerlink" title="2.    Playbook实战"></a>2.    Playbook实战</h1>之前我们分享的Ansbile基础模块使用时，那种Ad-hoc点对点的，一次执行一个模块的操作方式已经使得Andsible一中非常强大的管理工具；但playbook将会使Ansible成为超一流的管理工具。</li></ul><h2 id="2-1-Shell脚本与Playbook的转换"><a href="#2-1-Shell脚本与Playbook的转换" class="headerlink" title="2.1 Shell脚本与Playbook的转换"></a>2.1 Shell脚本与Playbook的转换</h2><p>现在越来越多的DevOPS也开始将目光移向了Ansible，因为Ansible可以轻松的将shell脚本或简单的shell命令转换为Ansible plays.</p><p>下面有一个安装apache的shell脚本，大家来感受一下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 安装Apache</span></span><br><span class="line">yum install --quiet -y httpd httpd-devel</span><br><span class="line"><span class="comment"># 复制配置文件</span></span><br><span class="line">cp /path/<span class="keyword">to</span>/config/httpd.conf /etc/httpd/conf/httpd.conf</span><br><span class="line">cp /path/<span class="keyword">to</span>/httpd-vhosts.conf /etc/httpd/conf/httpd-vhosts.conf</span><br><span class="line"><span class="comment"># 启动Apache，并设置开机启动</span></span><br><span class="line">service httpd start</span><br><span class="line">chkconfig httpd on</span><br></pre></td></tr></table></figure><p>将其转换为一个完整的playbook后：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">   - name:</span> <span class="string">"安装Apache"</span></span><br><span class="line"><span class="attr">     command:</span> <span class="string">yum</span> <span class="string">install</span> <span class="bullet">--quiet</span> <span class="bullet">-y</span> <span class="string">httpd</span> <span class="string">httpd-devel</span></span><br><span class="line"><span class="attr">   - name:</span> <span class="string">"复制配置文件"</span></span><br><span class="line"><span class="attr">     command:</span> <span class="string">cp</span> <span class="string">/tmp/httpd.conf</span> <span class="string">/etc/httpd/conf/httpd.conf</span></span><br><span class="line"><span class="attr">     command:</span> <span class="string">cp</span> <span class="string">/tmp/httpd-vhosts.conf</span> <span class="string">/etc/httpd/conf/httpd-vhosts.conf</span></span><br><span class="line"><span class="attr">   - name:</span> <span class="string">"启动Apache，并设置开机启动"</span></span><br><span class="line"><span class="attr">     command:</span> <span class="string">service</span> <span class="string">httpd</span> <span class="string">start</span></span><br><span class="line"><span class="attr">     command:</span> <span class="string">chkconfig</span> <span class="string">httpd</span> <span class="string">on</span></span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/1377560-734f5f53cc5c8e79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>将以上内容放在一个名为playbook.yml的文件中，直接调用ansible-playbook命令，即可运行，运行结果和脚本运行结果一致：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ansible-playbook ./playbook.yml</span></span><br></pre></td></tr></table></figure></p><p>也就是说，只要你有编写shell脚本的基本能力，你就可以快速的学会利用playbook来发挥Ansible的强大威力。</p><p>在上述playbook中，我们使用了“command”模块来运行了标准的shell命令。我们还给了每一出play一个“name”，因此当我们运行playbook时，每一个play都会有非常易读的的信息输出：</p><p><img src="http://upload-images.jianshu.io/upload_images/1377560-fda8481648cf404c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><hr><p>上面的playbook已经可以很好的运行shell脚本了，但是Ansible还有很多其他内置模块，可以大幅提升处理复杂配置的能力。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span><span class="bullet">--yaml</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  sudo:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">   - name:</span> <span class="string">安装Apache</span></span><br><span class="line"><span class="attr">     yum:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">state=present</span></span><br><span class="line"><span class="attr">     with_items:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">httpd</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">httpd-devel</span></span><br><span class="line"><span class="attr">   - name:</span> <span class="string">复制配置文件</span></span><br><span class="line"><span class="attr">     copy:</span></span><br><span class="line"><span class="attr">       src:</span> <span class="string">"<span class="template-variable">&#123;&#123; item.src &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">       dest:</span> <span class="string">"<span class="template-variable">&#123;&#123; item.dest &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">       owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">       group:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">       mode:</span> <span class="number">0644</span></span><br><span class="line"><span class="attr">     with_items:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">       src:</span> <span class="string">"/tmp/httpd.conf"</span><span class="string">,</span></span><br><span class="line"><span class="attr">         dest:</span> <span class="string">"/etc/httpd/conf/httpd.conf"</span> <span class="string">&#125;</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">       src:</span> <span class="string">"/tmp/httpd-vhosts.conf"</span><span class="string">,</span></span><br><span class="line"><span class="attr">       dest:</span> <span class="string">"/etc/httpd/conf/httpd-vhosts.conf"</span></span><br><span class="line">       <span class="string">&#125;</span></span><br><span class="line"><span class="attr">   - name:</span> <span class="string">检查Apache运行状态，并设置开机启动</span></span><br><span class="line"><span class="attr">     service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/1377560-67cc36f080c82de5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p> 运行结果如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/1377560-1091d90452474ae0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="2-2-Playbook案例逐行剖析"><a href="#2-2-Playbook案例逐行剖析" class="headerlink" title="2.2 Playbook案例逐行剖析"></a>2.2 Playbook案例逐行剖析</h2><p>现在我们已经对playbook有了一个大概的了解，接一下，让我们详细解剖一下上面的playbook都做了是什么以及怎么工作的。</p><ul><li>1    第一行，“—”，这个是YAML语法中注释的用法，就像shell脚本中的“#”号一样</li><li>2    第二行，“- hosts: all”，告诉ansible具体要在哪些主机上运行我的剧本（playbook），在本例中是all，即所有主机</li><li>3    第三行，“sudo:  yes”，告诉ansible通过sudo来运行相应命令，这样所有命令将会以root身份执行</li><li>4    第四行，“tasks:”，指定一系列将要运行的任务<blockquote><ul><li>每一个任务（play）以“- name: 安装Apache”开头。“- name:”字段并不是一个模块，不会执行任务实质性的操作，它只是给“task” 一个易于识别和名称。即便把name字段对应的行完全删除，也不会有任何问题。</li><li>本例中我们使用yum模块来安装Apache，替代了“yum -y install httpd httpd-devel”</li><li>在每一个play当中，都可以例用 with_items 来定义变量，并通过“”的形式来直接使用使用yum模块的state=present选项来确保软件被安装，或者使用state=absent来确保软件被删除</li><li>第二个任务（play）同样是“- name”字符开头</li><li>我们使用copy模块来将“src”定义的源文件（必须是ansible所在服务器上的本地文件 ）复制到“dest”定义的目的地址（此地址为远程主机的上地址）去,在传递文件的同时，还定义了文件的属主，属组和权限</li><li>这个play中，我们用数组的形式给变量赋值，使用{var1: value, var2: value} 的格式来赋值，变量的个数可以任意多，不同变量间以逗号分隔，使用的形式来调用变量，本例中为：</li></ul></blockquote></li><li><ol start="5"><li>第三个任务（play）使用了同样的结构，调用了service模块，以保证服务的正常开启</li></ol></li></ul><h2 id="2-3-Playbook与Shell脚本差异对比"><a href="#2-3-Playbook与Shell脚本差异对比" class="headerlink" title="2.3 Playbook与Shell脚本差异对比"></a>2.3 Playbook与Shell脚本差异对比</h2><p>当我们把shell脚本转换为playbook运行的时候，ansible会留下清晰的执行痕迹，明确告诉我们在每一台主机上的每一步都做了什么。</p><p>更厉害的是，当我们重复执行一个playbook时，当ansible发现系统的现有状态符合playbook所定义的状态时，anbile将自动跳过该操作。</p><p>比如下图，我们再次执行playbook: temp.yml，当ansible发现playbook中的play都已被完成，它将直接返回ok状态码，速度非常之快。<br>如果是shell脚本，肯定会硬着头皮，把所用操作再做一遍。</p><p><img src="http://upload-images.jianshu.io/upload_images/1377560-d21b5d629516270b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>在正式运行playbook之前，可以使用–check 或 -C 选项来检测playbook都会改变哪些内容，显示的结果跟真正执行时一模一样，但不会真的对被管理的服务器产生影响</p><h1 id="3-Ansible-playbook命令详解"><a href="#3-Ansible-playbook命令详解" class="headerlink" title="3.    Ansible-playbook命令详解"></a>3.    Ansible-playbook命令详解</h1><h2 id="3-1-限定执行范围"><a href="#3-1-限定执行范围" class="headerlink" title="3.1 限定执行范围"></a>3.1 限定执行范围</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--<span class="built_in">limit</span></span><br></pre></td></tr></table></figure><p>如果我们运行上面的例子，会发现所有被ansible管理的主机都会被操作。<br>我们可以通过修改“- hosts：”字段来指定哪些主机将会应用playbook的操作，</p><blockquote><p>   指定一台主机：<a href="http://www.magedu.com" target="_blank" rel="noopener">www.magedu.com</a><br>   指定多台主机：<a href="http://www.magedu.com,www.osstep.com" target="_blank" rel="noopener">www.magedu.com,www.osstep.com</a><br>   指定一组主机：dbserver</p></blockquote><p>当然，也可以直接通过ansible-playbook命令来指定主机：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ansible-playbook playbook.yml --<span class="built_in">limit</span> webservers</span></span><br></pre></td></tr></table></figure></p><p>这样以来（假设你的inventory文件中包含webserver组），即便playbook中设定“hosts: all”，但也仅对webserver组生效。<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--list-hosts</span></span><br></pre></td></tr></table></figure></p><p>如果想知道在执行playbook时，哪些主机将会受影响，则使用–list-hosts选项：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ansible-playbook playbook.yml --list-hosts</span></span><br></pre></td></tr></table></figure></p><p>运行结果：</p><p><img src="http://upload-images.jianshu.io/upload_images/1377560-05554bfab81e2628.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>（由于用测试的被管理主机只有一台，所以count结果为1）</p><h1 id="4-Ansible-playbook-用户与权限设置"><a href="#4-Ansible-playbook-用户与权限设置" class="headerlink" title="4.    Ansible-playbook: 用户与权限设置"></a>4.    Ansible-playbook: 用户与权限设置</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--remote-user</span></span><br></pre></td></tr></table></figure><p>Playbook中，如果在与hosts同组的字段中没有定义user，那么Ansible将会使用你在inventory文件中定义的用户，如里inventory文件中也没定义用户，Ansible将默认使用当前系统用户身份来通过SSH连接远程主机，在运程程主机中运行play内容。</p><p>我们也可以直接在ansible-playbook中使用 –remote-user选项来指定用户：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ansible-playbook playbook.yml --remote-user=tom</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--ask-sudo-<span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在某些情况下，我们需要传递sudo密码到远程主机，来保证sudo命令的正常运行。这时，可以使用–ask-sudo-pass (-K)选项来交互式的输入密码。</p><p>–sudo<br>使用–sudo选项，可以强制所有play都使用sudo用户，同时使用–sudo-user选项指定切换到具体哪个用户，如果不指定，则默认以root身份运行。</p><p>比如，当前用户Tom想以Jerry的身份运行playbook，命令如下：<br>$ ansible-playbook playbook.yml –sudo –sudo-user=jerry –ask-sudo-pass<br>执行过程中，会要求用户输入Jerry的密码。</p><h1 id="5-Ansible-playbook-其它选项"><a href="#5-Ansible-playbook-其它选项" class="headerlink" title="5.    Ansible-playbook: 其它选项"></a>5.    Ansible-playbook: 其它选项</h1><p>   Ansible-playbook命令还有一些其他选项：</p><blockquote><p>   –inventory=PATH (-i PATH)：指定inventory文件，默认文件是/etc/ansible/hosts<br>   –verbose(-v)：显示详细输出，也可以使用-vvvv显示精确到每分钟的输出<br>   –extra-vars=VARS(-e VARS)：定义在playbook使用的变量，格式为：”key=value,key=value”<br>   –forks=NUM ( -f NUM)：指定并发执行的任务数，默认为5，根据服务器性能，调大这个值可提高ansible执行效率<br>   –connection=TYPE ( -c TYPE)：指定连接远程主机的方式，默认为ssh，设为local时，刚只在本地执行playbook，建议不做修改<br>   –check：检测模式，playbook中定义的所有任务将在每台远程主机上进行检测，但并不直正执行</p></blockquote><p>以上这些参数即可满足大部分的工作需求。</p>]]></content>
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
            <tag> Playbook </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>collectd</title>
      <link href="/monitoring/collectd.html"/>
      <url>/monitoring/collectd.html</url>
      <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Collecting and visualizing data is an important way to make informed decisions about your servers and projects.</p><p>In a previous guide, we discussed how to install and configure Graphite to visualize data on our servers. However, we didn’t have a good way of collecting or even passing data into Graphite.</p><p>In this guide, we’ll discuss the installation and use of <code>collectd</code>, a system statistics gatherer that can collect and organize metrics about your server and running services.</p><p>We will show you how to install and configure collectd to pass data into Graphite to render. We will assume that you have Graphite up and running on an Ubuntu 14.04 server as we showed you in the last guide.<br><a id="more"></a></p><h2 id="Install-Collectd"><a href="#Install-Collectd" class="headerlink" title="Install Collectd"></a>Install Collectd</h2><p>The first thing we are going to do is install collectd. We can get this from the default repositories.</p><p>Refresh the local package index and then install by typing:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install collectd collectd-utils</span><br></pre></td></tr></table></figure><p>This will install the daemon and a helper control interface. We still need to configure it so that it knows to pass the data it collects to Graphite.</p><h2 id="Configure-Collectd"><a href="#Configure-Collectd" class="headerlink" title="Configure Collectd"></a>Configure Collectd</h2><p>Begin by opening the collectd configuration file in your editor with root privileges:</p><p>sudo nano /etc/collectd/collectd.conf<br>The first thing that we should set is the hostname of the machine that we are on. Collectd can be used to send information to a remote Graphite server, but we are using this on the same machine for this guide. You can choose whatever name you’d like:<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Hostname</span> <span class="string">"graph_host"</span></span><br></pre></td></tr></table></figure></p><p>If you have a real domain name configured, you can skip this and just leave toe <code>FQDNLookup</code> so that the server will use the DNS system to get the proper domain.</p><p>You may notice there is a parameter for “Interval”, which is the interval that collectd waits before querying data on the host. This is set by default to 10 seconds. If you followed along in the Graphite article, you will notice that this is the usual shortest interval for Graphite to track stats. These two values must match for data to be recorded reliably.</p><p>Next, we get right into the services that Collectd will gather information about. Collectd does this through the use of plugins. Most of the plugins are used to read information from the system, but plugins are also used to define where to send information. Graphite is one of these write plugins.</p><p>For this guide, we are going to ensure that the following plugins are enabled. You can comment out any other plugins, or you can work on configuring them correctly if you want to try them out on your host:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LoadPlugin apache</span><br><span class="line">LoadPlugin cpu</span><br><span class="line">LoadPlugin df</span><br><span class="line">LoadPlugin entropy</span><br><span class="line">LoadPlugin interface</span><br><span class="line">LoadPlugin load</span><br><span class="line">LoadPlugin memory</span><br><span class="line">LoadPlugin processes</span><br><span class="line">LoadPlugin rrdtool</span><br><span class="line">LoadPlugin users</span><br><span class="line">LoadPlugin write_graphite</span><br></pre></td></tr></table></figure></p><p>Some of these need configuration, and some of them will work fine out-of-the-box.</p><p>Continuing on down the file, we get to the configuration section of each plugin. Plugins are configured by defining a “block” for each configuration section. This is somewhat similar to how Apache compartmentalizes directives within blocks. We only will be taking a look at a few of these, since most of our plugins will work fine the way they are.</p><p>We enabled the Apache plugin because we have Apache installed to serve Graphite. We can configure the Apache plugin with a simple section that looks like this:<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;Plugin apache&gt;</span></span><br><span class="line">    <span class="section">&lt;Instance "Graphite"&gt;</span></span><br><span class="line">        <span class="attribute">URL</span> <span class="string">"http://domain_name_or_IP/server-status?auto"</span></span><br><span class="line">        <span class="attribute">Server</span> <span class="string">"apache"</span></span><br><span class="line">    <span class="section">&lt;/Instance&gt;</span></span><br><span class="line"><span class="section">&lt;/Plugin&gt;</span></span><br></pre></td></tr></table></figure></p><p>In a production environment, you may wish to keep the server stats protected behind an authentication layer. You can look at the commented code in this section of the file to see how that would work. For simplicity’s sake, we are going to demonstrate an open setup that is not authenticated.</p><p>We will be creating the <code>server-status</code> page for Apache that provides us with the details we need in a bit.</p><p>For the df plugin, which tells us how full our disks are, we can add a simple configuration that looks like this:<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;Plugin df&gt;</span></span><br><span class="line">    <span class="attribute">Device</span> <span class="string">"/dev/vda"</span></span><br><span class="line">    <span class="attribute">MountPoint</span> <span class="string">"/"</span></span><br><span class="line">    <span class="attribute">FSType</span> <span class="string">"ext3"</span></span><br><span class="line"><span class="section">&lt;/Plugin&gt;</span></span><br></pre></td></tr></table></figure></p><p>You should point the device to the device name of the drive on your system. You can find this by typing the command in the terminal:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">df</span></span><br></pre></td></tr></table></figure></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Filesystem     <span class="number">1</span>K-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/vda        <span class="number">61796348</span> <span class="number">1766820</span>  <span class="number">56867416</span>   <span class="number">4</span>% /</span><br><span class="line">none                   <span class="number">4</span>       <span class="number">0</span>         <span class="number">4</span>   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">udev             <span class="number">2013364</span>      <span class="number">12</span>   <span class="number">2013352</span>   <span class="number">1</span>% /dev</span><br><span class="line">tmpfs             <span class="number">404836</span>     <span class="number">340</span>    <span class="number">404496</span>   <span class="number">1</span>% /run</span><br><span class="line">none                <span class="number">5120</span>       <span class="number">0</span>      <span class="number">5120</span>   <span class="number">0</span>% /run/lock</span><br><span class="line">none             <span class="number">2024168</span>       <span class="number">0</span>   <span class="number">2024168</span>   <span class="number">0</span>% /run/shm</span><br><span class="line">none              <span class="number">102400</span>       <span class="number">0</span>    <span class="number">102400</span>   <span class="number">0</span>% /run/user</span><br></pre></td></tr></table></figure><p>Choose the networking interface you wish to monitor:<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Plugin <span class="class"><span class="keyword">interface</span>&gt;</span></span><br><span class="line">    <span class="class"><span class="keyword">Interface</span> "<span class="title">eth0</span>"</span></span><br><span class="line">    IgnoreSelected <span class="literal">false</span></span><br><span class="line">&lt;/Plugin&gt;</span><br></pre></td></tr></table></figure></p><p>Finally, we come to the Graphite plugin. This will tell collectd how to connect to our Graphite instance. Make the section look something like this:<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;Plugin write_graphite&gt;</span><br><span class="line">    &lt;Node <span class="string">"graphing"</span>&gt;</span><br><span class="line">        Host <span class="string">"localhost"</span></span><br><span class="line">        Port <span class="string">"2003"</span></span><br><span class="line">        Protocol <span class="string">"tcp"</span></span><br><span class="line">        LogSendErrors <span class="literal">true</span></span><br><span class="line">        Prefix <span class="string">"collectd."</span></span><br><span class="line">        StoreRates <span class="literal">true</span></span><br><span class="line">        AlwaysAppendDS <span class="literal">false</span></span><br><span class="line">        EscapeCharacter <span class="string">"_"</span></span><br><span class="line">    &lt;<span class="string">/Node</span>&gt;</span><br><span class="line">&lt;<span class="string">/Plugin</span>&gt;</span><br></pre></td></tr></table></figure></p><p>This tells our daemon how to connect to Carbon in order to pass off its data. We specify that it should look to the local computer on port 2003, which Carbon uses to listen for TCP connections.</p><p>Next, we tell it to use that protocol to reliably hand off the data to Carbon. We tell it to log errors about the hand off and then set the prefix for the data. Since we end this value with a dot, all of the collectd stats for this host will be stored in a “collectd” directory.</p><p>The store rates determines whether stats will be converted to gauges before being passed. The append data source line would append the node name to our metrics if enabled. The escape character determines how certain values with dots in them are converted to avoid Carbon from splitting them into directories.</p><p>Save and close the file when you are finished.</p><h2 id="Configure-Apache-to-Report-Stats"><a href="#Configure-Apache-to-Report-Stats" class="headerlink" title="Configure Apache to Report Stats"></a>Configure Apache to Report Stats</h2><p>In our configuration file, we enabled Apache stats tracking. We still need to configure Apache to allow this though.</p><p>In the Apache virtual hosts file that we have enabled for Graphite, we can add a simple location block that will tell Apache to report stats.</p><p>Open the file in your text editor:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano <span class="regexp">/etc/</span>apache2<span class="regexp">/sites-available/</span>apache2-graphite.conf</span><br></pre></td></tr></table></figure></p><p>Below the “content” location block, we are going to add another block so that Apache will serve statistics at the /server-status page. Add the following section:<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Alias</span> /content/ /usr/share/graphite-web/static/</span><br><span class="line">    <span class="section">&lt;Location "/content/"&gt;</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">SetHandler</span></span> None</span><br><span class="line">    <span class="section">&lt;/Location&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">&lt;Location "/server-status"&gt;</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">SetHandler</span></span> server-status</span><br><span class="line">        <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line">    <span class="section">&lt;/Location&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ErrorLog</span> <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/graphite-web_error.log</span><br></pre></td></tr></table></figure></p><p>Save and close the file when you are finished.</p><p>Now, we can reload Apache to get access to the new statistics:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>apache2 reload</span><br></pre></td></tr></table></figure></p><p>We can check to make sure everything is working correctly by visiting the page in our web browser. We just need to go to our domain, followed by /server-status:<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//domain_name_or_IP/server-status</span></span><br></pre></td></tr></table></figure></p><p>You should see a page that looks something like this:</p><p><img src="https://assets.digitalocean.com/articles/collectd_statsd/server_stats.png" alt="server stats"></p><h2 id="Setting-the-Storage-Schema-and-Aggregation"><a href="#Setting-the-Storage-Schema-and-Aggregation" class="headerlink" title="Setting the Storage Schema and Aggregation"></a>Setting the Storage Schema and Aggregation</h2><p>Now that we have collectd configured to gather statistics about your services, we need to adjust Graphite to handle the data it receives correctly.</p><p>Let’s start by creating a storage schema definition. Open up the storage schema configuration file:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano <span class="regexp">/etc/</span>carbon<span class="regexp">/storage-schemas.conf</span></span><br></pre></td></tr></table></figure></p><p>Inside, we need to add a definition that will dictate how long the information is kept, and how detailed the data should be at various levels.</p><p>We will tell Graphite to store collectd information at intervals of ten seconds for one day, at one minute for seven days, and intervals of ten minutes for one year.</p><p>This will give us a good balance between detailed information for recent activity and general trends over the long term. Collectd passes its metrics starting with the string <code>collectd</code>, so we will match that pattern.</p><p>The policy we described can be added by adding these lines. Remember, add these <strong>above</strong> the default policy, or else they will never be applied:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[collectd]</span></span><br><span class="line"><span class="attr">pattern</span> = ^collectd.*</span><br><span class="line"><span class="attr">retentions</span> = <span class="number">10</span>s:<span class="number">1</span>d,<span class="number">1</span>m:<span class="number">7</span>d,<span class="number">10</span>m:<span class="number">1</span>y</span><br></pre></td></tr></table></figure></p><p>Save and close the file when you are finished.</p><p>Reload the Services<br>Now that collectd is configured and Graphite knows how to handle its data, we can reload the services.</p><p>First, restart the Carbon service. It is a good idea to use the “stop” and then “start” command with a few seconds in between instead of the “restart” command. This makes sure that the data is completely flushed prior to the restart:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>carbon-cache stop          ## wait a few seconds here</span><br><span class="line">sudo<span class="built_in"> service </span>carbon-cache start</span><br></pre></td></tr></table></figure></p><p>After the Carbon service is up and running again, we can do the same thing with collectd. The service may not be running yet, but this will ensure that it handles the data correctly:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>collectd stop</span><br><span class="line">sudo<span class="built_in"> service </span>collectd start</span><br></pre></td></tr></table></figure></p><p>After this, you can visit your domain again, and you should see a new tree with your collectd information:</p><p><img src="https://assets.digitalocean.com/articles/collectd_statsd/collectd_tree.png" alt="collectd tree"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Our collectd configuration is complete and our stats are already being recorded! Now, we have a daemon configured to track our server and services.</p><p>We can configure or write additional plugins for collectd as the need arises. Additional servers with collectd can also send data to our Graphite server. Collectd is mainly used for collecting statistics about common services and your machines as a whole.</p><p>In the next article, we’ll set up StatsD, a service that can cache data before flushing it to Graphite. This will allow us us to work around the problem of data loss when sending stats too quickly that we described in the previous article. It will also give us with an interface to track statistics within our own programs and projects.</p>]]></content>
      
      <categories>
          
          <category> Monitoring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Monitoring </tag>
            
            <tag> collectd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Deploy Seyren with Grafana on Ubuntu 14.04</title>
      <link href="/monitoring/seyren.html"/>
      <url>/monitoring/seyren.html</url>
      <content type="html"><![CDATA[<p><img src="https://i.imgur.com/Ae5gQJZ.png" height="45" width="200"></p><p>Seyren (<a href="http://en.wikipedia.org/wiki/Wikipedia:IPA_for_English#Key" target="_blank" rel="noopener">/ˈsaɪ.rʌn/</a>) 是一款基于Graphite的报警平台，它支持下面这些报警通知方式：</p><ul><li><a href="http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol" target="_blank" rel="noopener">Email</a>, <a href="https://www.flowdock.com" target="_blank" rel="noopener">Flowdock</a>, <a href="https://www.hipchat.com" target="_blank" rel="noopener">HipChat</a>, <a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank" rel="noopener">HTTP</a>, <a href="http://hubot.github.com" target="_blank" rel="noopener">Hubot</a>, <a href="https://github.com/RJ/irccat" target="_blank" rel="noopener">IRCcat</a>, <a href="http://www.pagerduty.com" target="_blank" rel="noopener">PagerDuty</a>, <a href="https://pushover.net" target="_blank" rel="noopener">Pushover</a>, <a href="http://www.slf4j.org" target="_blank" rel="noopener">SLF4J</a>, <a href="https://www.slack.com" target="_blank" rel="noopener">Slack</a>, <a href="http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol" target="_blank" rel="noopener">SNMP</a>, <a href="https://www.twilio.com/" target="_blank" rel="noopener">Twilio</a></li></ul><a id="more"></a><p><a href="http://i.imgur.com/ahu3aM6.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/13nR3YA.png" height="400" width="560"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Prerequisites-依赖软件"><a href="#Prerequisites-依赖软件" class="headerlink" title="Prerequisites/依赖软件"></a>Prerequisites/依赖软件</h3><ul><li>An instance of Graphite</li><li>MongoDB (<a href="http://docs.mongodb.org/manual/installation/#installation-guides Installing MongoDB" target="_blank" rel="noopener">Install instructions</a>)<br><strong>特别注意: Seyren目前只支持MongoDB 3.0版本，在安装的时候一定要特别注意使用正确的版本。</strong></li></ul><h3 id="Run-下载并运行软件包"><a href="#Run-下载并运行软件包" class="headerlink" title="Run/下载并运行软件包"></a>Run/下载并运行软件包</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/scobal/</span>seyren<span class="regexp">/releases/</span>download<span class="regexp">/1.3.0/</span>seyren-<span class="number">1.3</span>.<span class="number">0</span>.jar</span><br><span class="line">export GRAPHITE_URL=http:<span class="regexp">//g</span>raphite.foohost.com:<span class="number">80</span></span><br><span class="line">java -jar seyren-<span class="number">1.3</span>.<span class="number">0</span>.jar</span><br><span class="line">open http:<span class="regexp">//</span>localhost:<span class="number">8080</span></span><br></pre></td></tr></table></figure><p>To run seyren on another port:<br>指定Seyren的端口，默认使用8080端口：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">SEYREN_URL</span>=<span class="string">"http://localhost:8081/seyren"</span></span><br><span class="line">java -jar seyren-1.3.0.jar <span class="attribute">-httpPort</span>=8081</span><br></pre></td></tr></table></figure><h3 id="邮件报警界面"><a href="#邮件报警界面" class="headerlink" title="邮件报警界面"></a>邮件报警界面</h3><p><img src="/images/seyren/seyren-mail.jpg" alt="报警邮件"></p><h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><p>The following options can be supplied as system properties or environment variables.<br>有趣的是，Seyren的很多配置是通过定义环境变量的方式来实现的，并没有专门的配置文件来定义这些设置，具体的变量信息，参考下面的介绍：<br><strong>(注意：设置Base中的变量就能保证Seyren的正常运行)</strong></p><h5 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h5><ul><li><code>MONGO_URL</code> - The Mongo <a href="http://docs.mongodb.org/manual/reference/connection-string/" target="_blank" rel="noopener">connection string</a>. / MongoDB的地址，默认是：<code>mongodb://localhost:27017/seyren</code>；</li><li><code>SEYREN_URL</code> - The location of your Seyren instance. / Seyren服务器的地址. 默认是: <code>http://localhost:8080/seyren</code>；</li><li><code>SEYREN_LOG_PATH</code> - The path of seyren.log. Default: <code></code>. If a value is set, it must end with a ‘/‘. / Seyren日志seyren.log的存放路径，默认为空；如果要设置，则路径名称必须以”/“结尾；</li><li><code>SEYREN_LOG_FILE_LEVEL</code> - The level of messages logged to the <code>file</code> appender (must correspond to a <a href="http://logback.qos.ch/" target="_blank" rel="noopener">Logback</a> log level. So one of <code>trace</code>, <code>debug</code>, <code>info</code>, <code>warn</code> or <code>error</code>). Default: <code>info</code>. / 定义日志的记录级别，各级别如下：<code>trace</code>, <code>debug</code>, <code>info</code>, <code>warn</code> or <code>error</code>；</li><li><code>SEYREN_THREADS</code> - The number of pooled check threads to start. / Seyren发起查检请求的并发数，默认为<code>8</code>；</li><li><code>GRAPHS_ENABLE</code> - Show(true) or hide(false) graphs in check page. Default: <code>true</code>. / 设置是否在check页面显示监控图，默认为<code>true</code>即显示监控图表。</li></ul><p><strong>以下为一些非必须的扩展选项，可按需查看使用</strong></p><h5 id="Graphite"><a href="#Graphite" class="headerlink" title="Graphite"></a><a href="http://graphite.readthedocs.org/en/latest/" target="_blank" rel="noopener">Graphite</a></h5><ul><li><code>GRAPHITE_URL</code> - The location of your Graphite server. Default: <code>http://localhost:80</code></li><li><code>GRAPHITE_REFRESH</code> - The fixed period (in ms) between checks. Default: <code>60000</code></li><li><code>GRAPHITE_USERNAME</code> - The HTTP Basic auth username for the Graphite server. Default: <code></code></li><li><code>GRAPHITE_PASSWORD</code> - The HTTP Basic auth password for the Graphite server. Default: <code></code></li><li><code>GRAPHITE_KEYSTORE</code> - The HTTP KeyStore path for the https Graphite server. Default: <code></code></li><li><code>GRAPHITE_KEYSTORE_PASSWORD</code> - The HTTP KeyStore password for the HTTPS Graphite server. Default: <code></code></li><li><code>GRAPHITE_TRUSTSTORE</code> - The HTTP TrustStore path for the https Graphite server. Default: <code></code></li><li><code>GRAPHITE_CONNECTION_REQUEST_TIMEOUT</code> - The number of millisconds to wait to obtain a connection from the pool. Default: <code>0</code> (infinite)</li><li><code>GRAPHITE_CONNECT_TIMEOUT</code> - The number of milliseconds to wait to establish a connection. Default: <code>0</code> (infinite)</li><li><code>GRAPHITE_SOCKET_TIMEOUT</code> - The number of milliseconds to wait for request data. Default: <code>0</code> (infinite)</li></ul><h5 id="Email"><a href="#Email" class="headerlink" title="Email"></a><a href="http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol" target="_blank" rel="noopener">Email</a></h5><ul><li><code>SMTP_HOST</code> - The smtp server to send email notifications from. Default: <code>localhost</code></li><li><code>SMTP_PORT</code> - The smtp server port. Default: <code>25</code></li><li><code>SMTP_FROM</code> - The from email address for sending out notifications. Default: <code>alert@seyren</code></li><li><code>SMTP_USERNAME</code> - The smtp server username if authenticated SMTP is used. Default: <code></code></li><li><code>SMTP_PASSWORD</code> - The smtp server password if authenticated SMTP is used. Default: <code></code></li><li><code>SMTP_PROTOCOL</code> - The smtp server protocol if authenticated SMTP is used. Default: <code>smtp</code></li></ul><h5 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h5><ul><li><code>HTTP_NOTIFICATION_URL</code> - The url for a resource that contains a POST HTTP Method. Default: <code></code></li></ul><h5 id="BigPanda-io"><a href="#BigPanda-io" class="headerlink" title="BigPanda.io"></a><a href="https://bigpanda.io" target="_blank" rel="noopener">BigPanda.io</a></h5><p>Use a <a href="https://a.bigpanda.io/#/app/integrations/alertsapi/instructions/alertsapi" target="_blank" rel="noopener">Big Panda App Key</a> as Target when adding a new subscription.</p><ul><li><code>BIGPANDA_NOTIFICATION_URL</code> - The url for a resource that contains a POST HTTP Method. Default: <code></code></li><li><code>BIGPANDA_AUTH_BEARER</code> - The Authorization Bearer header that is assigned to each customer by BigPanda. See <a href="https://a.bigpanda.io/#/app/integrations/alertsapi/instructions/alertsapi" target="_blank" rel="noopener">Alerts API integration</a> Default: <code></code></li></ul><h5 id="Flowdock"><a href="#Flowdock" class="headerlink" title="Flowdock"></a><a href="https://www.flowdock.com" target="_blank" rel="noopener">Flowdock</a></h5><p>Use a <a href="https://www.flowdock.com/account/tokens" target="_blank" rel="noopener">Flow API token</a> as Target when adding a new subscription.</p><ul><li><code>FLOWDOCK_EXTERNAL_USERNAME</code> - The username that messages will be sent from to a flow. Default: <code>Seyren</code></li><li><code>FLOWDOCK_TAGS</code> -  Special tags to add to all messages. Default: <code></code></li><li><code>FLOWDOCK_EMOJIS</code> - Mapping between state and emojis unicode. Default: <code></code></li></ul><h5 id="HipChat"><a href="#HipChat" class="headerlink" title="HipChat"></a><a href="https://www.hipchat.com" target="_blank" rel="noopener">HipChat</a></h5><ul><li><code>HIPCHAT_AUTHTOKEN</code> - The hipchat api auth token. Default: <code></code></li><li><code>HIPCHAT_USERNAME</code> - The username that messages will be sent from. Default: <code>Seyren Alert</code></li></ul><h5 id="Hubot"><a href="#Hubot" class="headerlink" title="Hubot"></a><a href="http://hubot.github.com" target="_blank" rel="noopener">Hubot</a></h5><ul><li><code>HUBOT_URL</code> - The location where Hubot is running. Default <code></code></li></ul><h5 id="IRCcat"><a href="#IRCcat" class="headerlink" title="IRCcat"></a><a href="https://github.com/RJ/irccat" target="_blank" rel="noopener">IRCcat</a></h5><ul><li><code>IRCCAT_HOST</code> - The hostname of the server where IRCcat is running. Default: <code>localhost</code></li><li><code>IRCCAT_PORT</code> - The port on which IRCcat is running. Default: <code>12345</code></li></ul><h5 id="PagerDuty"><a href="#PagerDuty" class="headerlink" title="PagerDuty"></a><a href="http://www.pagerduty.com" target="_blank" rel="noopener">PagerDuty</a></h5><ul><li>No system properties or environment variables here, but in “Subscriptions dialog box”, set the target field with a “Service API Key”.<br>To generate a “Service API Key”, see <a href="https://support.pagerduty.com/hc/en-us/articles/202828730-Adding-Services" target="_blank" rel="noopener">PagerDuty Support: Adding Services</a>, section “Use our API directly”.</li></ul><h5 id="Pushover"><a href="#Pushover" class="headerlink" title="Pushover"></a><a href="https://pushover.net" target="_blank" rel="noopener">Pushover</a></h5><ul><li><code>PUSHOVER_APP_API_TOKEN</code> - Your pushover App API Token</li></ul><h5 id="Real-time-metrics"><a href="#Real-time-metrics" class="headerlink" title="Real-time metrics"></a><a href="https://github.com/scobal/seyren/pull/142" target="_blank" rel="noopener">Real-time metrics</a></h5><ul><li><code>GRAPHITE_CARBON_PICKLE_ENABLE</code> - Enable a TCP server to listen Carbon relay <a href="http://graphite.readthedocs.org/en/latest/feeding-carbon.html" target="_blank" rel="noopener">pickle protocol</a>. Default: <code>false</code></li><li><code>GRAPHITE_CARBON_PICKLE_PORT</code> - The TCP server port. Default: <code>2004</code></li></ul><h5 id="Slack"><a href="#Slack" class="headerlink" title="Slack"></a><a href="https://www.slack.com" target="_blank" rel="noopener">Slack</a></h5><p>The target for a Slack subscription will be the channel name (including the <code>#</code>, for example <code>#channel</code>). You can optionally suffix the channel name with <code>!</code> and that will cause the alerts to include a <code>@channel</code> mention (for example <code>#channel!</code>).</p><ul><li><code>SLACK_TOKEN</code> - The Slack api auth token. Default: <code></code></li><li><code>SLACK_USERNAME</code> - The username that messages will be sent to slack. Default: <code>Seyren</code></li><li><code>SLACK_ICON_URL</code> - The user icon URL. Default: <code></code></li><li><code>SLACK_EMOJIS</code> - Mapping between state and emojis unicode. Default: <code></code></li></ul><h5 id="SNMP"><a href="#SNMP" class="headerlink" title="SNMP"></a><a href="http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol" target="_blank" rel="noopener">SNMP</a></h5><ul><li><code>SNMP_HOST</code> - The SNMP host. Default: <code>localhost</code></li><li><code>SNMP_PORT</code> - The SNMP port. Default: <code>162</code></li><li><code>SNMP_COMMUNITY</code> - The SNMP  community. Default: <code>public</code></li><li><code>SNMP_OID</code> - The SNMP OID. Default: <code>1.3.6.1.4.1.32473.1</code></li></ul><h5 id="TEMPLATE"><a href="#TEMPLATE" class="headerlink" title="TEMPLATE"></a><a href="http://en.wikipedia.org/wiki/Apache_Velocity" target="_blank" rel="noopener">TEMPLATE</a></h5><ul><li><code>TEMPLATE_EMAIL_FILE_PATH</code> - The path to the velocity template used when emailing an alert. Seyren will first attempt to load from the class path, but will fall back to loading from the filesystem.  Default: <code>com/seyren/core/service/notification/email-template.vm&quot;</code></li><li><code>TEMPLATE_EMAIL_SUBJECT_FILE_PATH</code> - The path to the velocity template used for subject when emailing an alert. Seyren will first attempt to load from the class path, but will fall back to loading from the filesystem.  Default: <code>com/seyren/core/service/notification/email-subject-template.vm&quot;</code></li></ul><h5 id="Twilio"><a href="#Twilio" class="headerlink" title="Twilio"></a><a href="https://www.twilio.com/" target="_blank" rel="noopener">Twilio</a></h5><ul><li><code>TWILIO_ACCOUNT_SID</code> - The Twilio Account SID. Default <code></code></li><li><code>TWILIO_AUTH_TOKEN</code> - The Twilio Auth Token. Default <code></code></li><li><code>TWILIO_PHONE_NUMBER</code> - The Twilio phone number to use to send SMS. Default <code></code></li><li><code>TWILIO_URL</code> - The Twilio API URL. Mostly useful for testing. Default <code>https://api.twilio.com/2010-04-01/Accounts</code></li></ul><h5 id="Victorops"><a href="#Victorops" class="headerlink" title="Victorops"></a><a href="https://www.victorops.com/" target="_blank" rel="noopener">Victorops</a></h5><ul><li><code>VICTOROPS_REST_ENDPOINT</code> - The REST Endpoint given by Victorops. See <a href="http://victorops.force.com/knowledgebase/articles/Integration/Alert-Ingestion-API-Documentation/" target="_blank" rel="noopener">REST Integration</a> Default <code></code></li></ul><h5 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy)"></a><a href="http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/HttpClientBuilder.html#useSystemProperties(" target="_blank" rel="noopener">Proxy</a>)</h5><p>The Proxy settings are changed by using JAVA_OPTS. It important that you exclude your graphite server or you will proxy these requests also.</p><ul><li><code>JAVA_OPTS Example</code> JAVA_OPTS=”-server -Dhttps.proxyHost=<code>PROXYSERVER</code> -Dhttps.proxyPort=<code>PROXYPORT</code> -Dhttp.proxyHost=<code>PROXYSERVER</code> -Dhttp.proxyPort=<code>PROXYPORT</code> -Dhttp.nonProxyHosts=<code>GRAPHITESERVER|*YOURDOMAIN.COM|INTERNALHIPCHAT</code>“</li></ul><h2 id="Seyren-API"><a href="#Seyren-API" class="headerlink" title="Seyren API"></a>Seyren API</h2><p>See <a href="API.md">Seyren API</a></p><h2 id="Chef"><a href="#Chef" class="headerlink" title="Chef"></a>Chef</h2><p>You can use <a href="https://github.com/obazoud/chef-seyren" target="_blank" rel="noopener">Seyren Cookbook</a> to deploy Seyren with <a href="http://www.getchef.com/" target="_blank" rel="noopener">Chef</a>.</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>You can use the <a href="https://registry.hub.docker.com/u/usman/docker-seyren/" target="_blank" rel="noopener">Docker Seyren Image</a> to deploy a seyren instance in a <a href="https://docker.com" target="_blank" rel="noopener">docker</a> container.</p><h2 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker compose"></a>Docker compose</h2><p>You can use <code>docker-compose</code> to create containers and hack seyren.<br>First, you need to install <a href="https://docs.docker.com/compose/#installation-and-set-up" target="_blank" rel="noopener">Docker and Docker Compose</a>.<br>Then, you just need to start Docker Compose:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker-compose up</span></span><br></pre></td></tr></table></figure></p><p>and open <a href="http://localhost:8080/seyren" target="_blank" rel="noopener">http://localhost:8080/seyren</a>.<br>Graphite is available on <a href="http://localhost:8081/" target="_blank" rel="noopener">http://localhost:8081/</a> with Basic Auth guest/guest.</p><h2 id="Init-script"><a href="#Init-script" class="headerlink" title="Init script"></a>Init script</h2><p><a href="https://github.com/wingZero21/Seyren-Init" target="_blank" rel="noopener">Seyren-Init</a> is an init.d script which allows you to start the service.</p><h2 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h2><p><a href="http://travis-ci.org/scobal/seyren" target="_blank" rel="noopener"><img src="https://secure.travis-ci.org/scobal/seyren.png?branch=master" alt="Build Status"></a></p><p>To run the acceptance tests with Maven:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mvn </span>clean verify</span><br></pre></td></tr></table></figure><p>To run the integration tests with Maven:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mvn </span>clean verify -Pkarma</span><br></pre></td></tr></table></figure><p>To fire-up the app using Maven and wait (meaning you can run the tests separately from your IDE):</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mvn </span>clean verify -Dwait</span><br></pre></td></tr></table></figure><p>You should then be able to browse to <code>http://localhost:8080/seyren</code> and have a play.</p><p>To package up a new jar file without running the tests:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn package -DskipTests</span><br><span class="line"># <span class="keyword">Set</span> environment <span class="comment">variables as needed.</span></span><br><span class="line">java <span class="comment">-jar seyren-web</span>/target/<span class="comment">seyren-web-*-war-exec.jar</span></span><br></pre></td></tr></table></figure><p>本文参考该Github项目中的Readme:<a href="https://github.com/scobal/seyren" target="_blank" rel="noopener">https://github.com/scobal/seyren</a></p>]]></content>
      
      <categories>
          
          <category> Monitoring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> graphite </tag>
            
            <tag> grafana </tag>
            
            <tag> Monitoring </tag>
            
            <tag> ubuntu </tag>
            
            <tag> seyren </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Deploy Graphite with Grafana on Ubuntu 14.04 (Part Ⅱ)</title>
      <link href="/monitoring/grafana.html"/>
      <url>/monitoring/grafana.html</url>
      <content type="html"><![CDATA[<p>Grafana 是 <a href="https://1byte.pro/monitoring/graphite.html">Graphite</a>仪表盘和图形编辑器。Grafana 是开源的、功能齐全的度量仪表盘和图形编辑器，支持 Graphite，InfluxDB 和 OpenTSDB。</p><p>Grafana 主要特性：</p><ul><li>灵活丰富的图形化选项；</li><li>可以混合多种风格；</li><li>支持白天和夜间模式；</li><li>多个数据源；</li><li>Graphite 和 InfluxDB 查询编辑器等等。<a id="more"></a><h2 id="Install-and-Configure-Grafana"><a href="#Install-and-Configure-Grafana" class="headerlink" title="Install and Configure Grafana"></a>Install and Configure Grafana</h2><strong>1.</strong> Add Grafana’s repository to sources.list:<br>添加安装Grafana所需的源<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> 'deb https:<span class="string">//packagecloud.io/grafana/stable/debian/</span> wheezy main' |  sudo tee -a <span class="string">/etc/apt/sources.list</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>2.</strong> Add the <a href="https://packagecloud.io/grafana" target="_blank" rel="noopener">Package Cloud</a> key to install signed packages:<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://packagecloud.io/gpg.key | sudo apt-key <span class="keyword">add</span><span class="bash"> -</span></span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> Update apt and install Grafana:<br>更新源，通过apt-get安装Grafana<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update &amp;&amp; sudo apt-<span class="builtin-name">get</span> install grafana</span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> Configure Grafana to use the PostgreSQL database created earlier:<br>配置Grafana使用之前创建的PostgreSQL数据库<br><em>File excerpt:</em> <strong>/etc/grafana/grafana.ini</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[database]</span><br><span class="line"><span class="comment"># Either "mysql", "postgres" or "sqlite3", it's your choice</span></span><br><span class="line">type = postgres</span><br><span class="line">host = 127.0.0.1:5432</span><br><span class="line">name = grafana</span><br><span class="line">user = graphite</span><br><span class="line">password = graphiteuserpassword</span><br></pre></td></tr></table></figure></p><p><strong>5.</strong> Also in <code>/etc/grafana/grafana.ini</code>, configure the <code>domain</code> and <code>root_url</code>, and set a strong admin password and secret key:<br>配置WEB端口及帐号密码：<br><em>File excerpt:</em> **/etc/grafana/grafana.ini<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[server]</span></span><br><span class="line"><span class="attr">protocol</span> = http</span><br><span class="line"><span class="attr">http_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">http_port</span> = <span class="number">3000</span></span><br><span class="line"><span class="attr">domain</span> = example.com</span><br><span class="line"><span class="attr">enforce_domain</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">root_url</span> = %(protocol)s://%(domain)s/</span><br><span class="line"></span><br><span class="line"><span class="section">[security]</span></span><br><span class="line"><span class="attr">admin_user</span> = admin</span><br><span class="line"><span class="attr">admin_password</span> = SecureAdminPass</span><br><span class="line"><span class="attr">secret_key</span> = somelongrandomstringkey</span><br></pre></td></tr></table></figure></p><p><strong>6.</strong> Enable proxy modules for Apache reverse proxying to work:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod<span class="built_in"> proxy </span>proxy_http xml2enc</span><br></pre></td></tr></table></figure></p><p><strong>7.</strong> Create an Apache site configuration file to proxy requests to Grafana. Remember to change <code>example.com</code> to your own domain:<br>通过Apache 使用80端口对Grafana进行访问<br><em>File excerpt:</em> <strong>/etc/apache2/sites-available/apache2-grafana.conf</strong><br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></span><br><span class="line">    <span class="attribute">ProxyPreserveHost</span> <span class="literal">On</span></span><br><span class="line">    <span class="attribute">ProxyPass</span> / http://127.0.0.1:3000/</span><br><span class="line">    <span class="attribute">ProxyPassReverse</span> / http://127.0.0.1:3000/</span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> example.com</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>8.</strong> Enable Grafana’s site configuration with:<br>启用Grafana的Apache配置：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> a2ensite apache2-grafana</span><br></pre></td></tr></table></figure></p><p><strong>9.</strong> Configure Grafana to run after boot and then start service:<br>设置Grafana开机启动：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-rc.d grafana-server defaults 95 10</span><br><span class="line">sudo<span class="built_in"> service </span>grafana-server start</span><br></pre></td></tr></table></figure></p><p>Restart Apache to load the new modules and configuration changes:<br>重启Apache，以应用最新配置：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>apache2 restart</span><br></pre></td></tr></table></figure></p><p>At this point, you should be able to open your Linode’s domain or IP address in a browser to see Grafana’s login page.<br>至些，可以从浏览中通过访问主机80端口来访问Grafana界面。</p><h2 id="Add-a-Graphite-Data-Source-to-Grafana"><a href="#Add-a-Graphite-Data-Source-to-Grafana" class="headerlink" title="Add a Graphite Data Source to Grafana"></a>Add a Graphite Data Source to Grafana</h2><p>为Grafa添加数据源，即连接Graphite<br><strong>1.</strong> Log in into Grafana using the <code>admin</code> credentials you specified in <code>grafana.ini</code> above.<br>使用前面设置的帐号密码来登录Grafana，默认帐号密码是：admin/admin<br><strong>2.</strong> Click on <code>Data Sources</code> and select <code>Add new</code>. Fill in all the fields as shown in the screenshot below:<br><img src="https://www.linode.com/docs/assets/graphite_grafana_data_source.png" alt="Add Data Source dialog"></p><p>Click <strong>Save</strong> to create the new Data Source.<br><strong>3.</strong> Now, before creating a graph, add more test data for the test.count metric by again running:<br>在添加新的监控图表之前，生成一份新测试数据：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> <span class="number">16</span> <span class="number">2</span>; do echo <span class="string">"test.count $i `date +%s`"</span> | nc -q0 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">2003</span>; sleep <span class="number">6</span>; done</span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> Create a new dashboard by clicking the <strong>Home</strong> button and then <strong>+ New</strong>:<br>添加一个Dashboard:<br><img src="https://www.linode.com/docs/assets/graphite_grafana_new_dashboard.png" alt="Create new dashboard"></p><p><strong>5.</strong> Add a Graph panel to the newly created dashboard:<br>在新创建的dashboard中添加新图：<br><img src="https://www.linode.com/docs/assets/graphite_grafana_new_graph.png" alt="Create new graph panel"></p><p><strong>6.</strong> Edit the Graph panel properties by clicking the tab with the words <strong>no title (click here)</strong>. Then click <strong>Edit</strong>:<br>向图中添加数据<br><img src="https://www.linode.com/docs/assets/graphite_grafana_edit_graph.png" alt="Edit graph panel"></p><p><strong>7.</strong> Make sure the <strong>graphite</strong> data source you’ve created is chosen in the dropdown box at the bottom right (marked as 1 in the screenshot below). In the dropdown at the top right corner (marked as 2), choose <strong>Last 15 minutes</strong>.<br>Click <strong>select metric</strong>. Choose <strong>test</strong> and then <strong>count</strong> (marked as 3) to add the test metric you previously created. At this point, the sample data should appear on the graph.<br>Finally, click the <strong>Save</strong> button (marked as 4) to save the dashboard you just created.<br>选择需要监控的数据源。<br>一图胜千言。<br><img src="https://www.linode.com/docs/assets/graphite_grafana_edit_graph_add_metric.png" alt="Add test metric to the panel"></p><p>Grafana图片界面展示：<a href="http://play.grafana-zabbix.org/dashboard/db/grafana-zabbix-demo" target="_blank" rel="noopener">http://play.grafana-zabbix.org/dashboard/db/grafana-zabbix-demo</a></p><p>The pure English Version: <a href="https://www.linode.com/docs/uptime/monitoring/deploy-graphite-with-grafana-on-ubuntu-14-04" target="_blank" rel="noopener">https://www.linode.com/docs/uptime/monitoring/deploy-graphite-with-grafana-on-ubuntu-14-04</a></p><h2 id="More-Information"><a href="#More-Information" class="headerlink" title="More Information"></a>More Information</h2><p>You may wish to consult the following resources for additional information on this topic. While these are provided in the hope that they will be useful, please note that we cannot vouch for the accuracy or timeliness of externally hosted materials.<br>下面是一引起扩展资料，有兴趣的可以做为扩展阅读。</p><ul><li><a href="http://graphite.readthedocs.org/en/latest/install.html" target="_blank" rel="noopener">Installing Graphite</a></li><li><a href="http://graphite.readthedocs.org/en/latest/config-carbon.html" target="_blank" rel="noopener">Configuring Carbon</a></li><li><a href="http://docs.grafana.org/installation/debian/" target="_blank" rel="noopener">Installing Grafana on Debian/Ubuntu</a></li><li><a href="http://docs.grafana.org/datasources/graphite/" target="_blank" rel="noopener">Adding Graphite data source to Grafana</a></li></ul>]]></content>
      
      <categories>
          
          <category> Monitoring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> graphite </tag>
            
            <tag> grafana </tag>
            
            <tag> Monitoring </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Deploy Graphite with Grafana on Ubuntu 14.04(Part Ⅰ)</title>
      <link href="/monitoring/graphite.html"/>
      <url>/monitoring/graphite.html</url>
      <content type="html"><![CDATA[<p><a href="http://graphite.readthedocs.org/en/latest/index.html" target="_blank" rel="noopener">Graphite</a>是一款企业级的监控工具，其采用Django框架，可以运行在廉价的硬件资源之上。Graphite采用简单的文本协议和绘图功能可以方便地使用在任何操作系统上。本文将以Ubuntu 14.04为系统环境，就Graphite与<a href="http://graphite.readthedocs.org/en/latest/index.html" target="_blank" rel="noopener">Grafana</a>的安装与协作做详细介绍。</p><h2 id="Before-You-Begin-热身准备"><a href="#Before-You-Begin-热身准备" class="headerlink" title="Before You Begin / 热身准备"></a>Before You Begin / 热身准备</h2><p><strong>1.</strong> Familiarize yourself with our Getting Started guide and complete the steps for setting your Linode’s hostname and timezone.<br>本文原文来自Linode官网，所以会看到Linode字样，不用理会，把它当成你的主机的就可以了<br><a id="more"></a><br><strong>2.</strong> This guide will use sudo wherever possible from an example account named graphite. Complete the sections of our Securing Your Server guide to create the graphite user, harden SSH access, remove unnecessary network services and set up a firewall. You may need to create additional firewall rules for your specific application.<br>本文默认使用普通用户进行安装部署<br><strong>3.</strong> Update your system:<br>开始前，系统需要做一下更新（非必须）<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update &amp;&amp; sudo apt-<span class="builtin-name">get</span> upgrade</span><br></pre></td></tr></table></figure></p><h2 id="Install-Apache-Python-Tools-and-Graphite"><a href="#Install-Apache-Python-Tools-and-Graphite" class="headerlink" title="Install Apache, Python Tools and Graphite"></a>Install Apache, Python Tools and Graphite</h2><p>Install the system packages required for working with Graphite:<br>安装Graphite本身及其依赖的一些工具<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install build-essential graphite-web graphite-carbon python-<span class="built_in">dev</span> apache2 libapache2-<span class="built_in">mod</span>-wsgi libpq-<span class="built_in">dev</span> python-psycopg2</span><br></pre></td></tr></table></figure></p><p>During the installation of <code>graphite-carbon</code>, you will be asked if you want to remove the whisper database files should you ever uninstall Graphite. Answer <strong>No</strong> to this prompt. You can always remove the files later (which are located in <code>/var/lib/graphite/whisper</code>).<br>安装<code>graphite-carbon</code>的过程中，会提示你是要删除whisper数据库文件，回答No就好，我们可以后面随时手动删除这些文件；如果是新主机，回答Yes也没有问题。</p><h2 id="Configure-Carbon"><a href="#Configure-Carbon" class="headerlink" title="Configure Carbon"></a>Configure Carbon</h2><p><strong>1.</strong> Configure the retention rate for test metrics by adding a <code>[test]</code> block to Carbon’s <code>storage-schemas.conf</code> file. <em>This step is given for testing purposes only and can be safely skipped if you have no use to generate test metrics.</em></p><p>The retention times given below will save data every 5 seconds for 3 hours, and a separate set of data from that aggregated sample every 1 minute for 1 day.<br>这个文件设置了Graphie接收数据的频率和保存时间。我们向其中添加<code>[test]</code>字段用于测试。</p><p><em>File excerpt:</em> <strong>/etc/carbon/storage-schemas.conf</strong><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[carbon]</span></span><br><span class="line"><span class="attr">pattern</span> = ^carbon\.</span><br><span class="line"><span class="attr">retentions</span> = <span class="number">60</span>:<span class="number">90</span>d</span><br><span class="line"></span><br><span class="line"><span class="section">[test]</span></span><br><span class="line"><span class="attr">pattern</span> = ^test\.</span><br><span class="line"><span class="attr">retentions</span> = <span class="number">5</span>s:<span class="number">3</span>h,<span class="number">1</span>m:<span class="number">1</span>d  #第一保存配置是，保存每<span class="number">5</span>秒一次的数据<span class="number">3</span>小时，第二保存配置是保存第分钟取一次的数据一天</span><br><span class="line"></span><br><span class="line"><span class="section">[default_1min_for_1day]</span></span><br><span class="line"><span class="attr">pattern</span> = .*</span><br><span class="line"><span class="attr">retentions</span> = <span class="number">60</span>s:<span class="number">1</span>d</span><br></pre></td></tr></table></figure></p><p>For more information on how to configure Carbon storage, see the section <a href="http://graphite.readthedocs.org/en/latest/config-carbon.html#storage-schemas-conf" target="_blank" rel="noopener">torage-schemas.conf</a> in Graphite’s documentation.</p><p><strong>2.</strong> Copy the default aggregation configuration to <code>/etc/carbon</code> so we can configure our own settings:<br>产生文件<code>storage-aggregation.conf</code>：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp <span class="regexp">/usr/</span>share<span class="regexp">/doc/g</span>raphite-carbon<span class="regexp">/examples/</span>storage-aggregation.conf.example <span class="regexp">/etc/</span>carbon<span class="regexp">/storage-aggregation.conf</span></span><br></pre></td></tr></table></figure></p><p><code>storage-aggregation.conf</code> describes aggregation policies Carbon uses to produce less detailed metrics, such as the 1m:1d retention in the [test] block added above. By default, only the average metric value is taken, which will result in data loss when, for example, you need maximum and minimum values. For this reason, <code>[min]</code>,<code>[max]</code> and <code>[sum]</code> sections are found in the configuration file.<br>文件<code>storage-aggregation.conf</code>定义了Carbon聚合数据的策略</p><p><strong>3.</strong>Third, Enable Carbon’s cache to run on boot:<br>设置Carbon-cahce开机启动</p><p><em>File excerpt:</em> <strong>/etc/default/graphite-carbon</strong><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CARBON_CACHE_ENABLED</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>Start the Carbon cache service:<br>启动：Carbon cache<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>carbon-cache start</span><br></pre></td></tr></table></figure></p><h2 id="Install-and-Configure-PostgreSQL"><a href="#Install-and-Configure-PostgreSQL" class="headerlink" title="Install and Configure PostgreSQL"></a>Install and Configure PostgreSQL</h2><p>grephit-web依赖PosetgreSQL数据库<br><strong>1.</strong> Install PostgreSQL for the graphite-web application:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install postgresql</span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> Change to the <code>postgres</code> user and create a database user for Graphite:<br>为Graphite创建数据库用户<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - postgres</span><br><span class="line">createuser graphite <span class="comment">--pwprompt</span></span><br></pre></td></tr></table></figure></p><p>You will be asked to provide a password for the new database user. After that, create the databases <code>graphite</code> and <code>grafana</code> with the system’s <code>graphite</code> user as the owner:<br>使用刚创建的用户<code>graphite</code>创建两个数据库：<code>graphite</code>和<code>grafana</code><br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">createdb -<span class="keyword">O</span> graphite graphite</span><br><span class="line">createdb -<span class="keyword">O</span> graphite grafana</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> When finished configuring the PostgreSQL databases, change back to the graphite user:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">su - graphite</span></span><br></pre></td></tr></table></figure></p><h2 id="Configure-Graphite"><a href="#Configure-Graphite" class="headerlink" title="Configure Graphite"></a>Configure Graphite</h2><p><strong>1.</strong> Update Graphite’s DATABASES dictionary definition with the settings for the PostgreSQL database created earlier:<br>配置Graphite使用刚才创建的数据库：<br><em>File excerpt:</em> <strong>/etc/graphite/local_settings.py</strong><br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">'default'</span>: &#123;</span><br><span class="line">    <span class="string">'NAME'</span>: <span class="string">'graphite'</span>,</span><br><span class="line">    <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql_psycopg2'</span>,</span><br><span class="line">    <span class="string">'USER'</span>: <span class="string">'graphite'</span>,</span><br><span class="line">    <span class="string">'PASSWORD'</span>: <span class="string">'graphiteuserpassword'</span>,</span><br><span class="line">    <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    <span class="string">'PORT'</span>: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> Also add the following lines to the end of the file:<br>在文件尾部添加下面几项配置：<br><em>File excerpt:</em> <strong>/etc/graphite/local_settings.py</strong><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">USE_REMOTE_USER_AUTHENTICATION</span> = <span class="literal">True</span></span><br><span class="line"><span class="attr">TIME_ZONE</span> = <span class="string">'Your/Timezone'</span></span><br><span class="line"><span class="attr">SECRET_KEY</span> = <span class="string">'somelonganduniquesecretstring'</span></span><br></pre></td></tr></table></figure></p><ul><li>TIME_ZONE is your Linode’s time zone, which will be used in graphs. For possible values, run <code>timedatectl</code> or see the TZ column in <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">Wikipedia’s timezone database</a>.<code>timedatectl</code>命令可以用来获取当前主机的时区信息</li><li>SECRET_KEY is a long and unique string used as a salt when hashing passwords.一个用来哈希加密密码的随机字符串，越随机越好。</li></ul><p><strong>3.</strong> Initialize the database with:<br>初始化数据库：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo graphite-manage syncdb</span></span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> Then answer the prompts to create a superuser account which will be used to access Graphite’s web interface.</p><h2 id="Configure-Apache-for-Graphite"><a href="#Configure-Apache-for-Graphite" class="headerlink" title="Configure Apache for Graphite"></a>Configure Apache for Graphite</h2><p>配置Apache用于web访问Graphite<br><strong>1.</strong> Copy Graphite’s Apache config template into Apache’s sites-available directory:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp <span class="regexp">/usr/</span>share<span class="regexp">/graphite-web/</span>apache2-graphite.conf <span class="regexp">/etc/</span>apache2<span class="regexp">/sites-available</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> Change Graphite’s port from 80 to 8080 (port 80 will be used for Grafana later).<br>使用8080端口来访问Graphite<br><em>File excerpt:</em> <strong>/etc/apache2/sites-available/apache2-graphite.conf</strong><br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:<span class="number">8080</span>&gt;</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> Make sure Apache is listening on port 8080. Add <code>Listen 8080</code> after <code>Listen 80</code> in <code>ports.conf</code>:<br>配置Apache监听8080端口：<br><em>File excerpt:</em> <strong>/etc/apache2/ports.conf</strong><br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute"><span class="nomarkup">Listen</span></span> 80</span><br><span class="line"><span class="attribute"><span class="nomarkup">Listen</span></span> 8080</span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> Disable the default Apache site to avoid conflicts:<br>关闭默认页面<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> a2dissite <span class="number">000</span>-<span class="keyword">default</span></span><br></pre></td></tr></table></figure></p><p><strong>5.</strong> Enable Graphite’s virtual site:<br>开启Graphite虚拟站点<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> a2ensite apache2-graphite</span><br></pre></td></tr></table></figure></p><p><strong>6.</strong> Reload Apache to apply the changes:<br>Reload Apache<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>apache2 reload</span><br></pre></td></tr></table></figure></p><p>Now you should be able to access Graphite by going to your Linode’s hostname or IP address using port 8080 in a web browser (ex: <code>example_domain.com:8080</code>). You’ll see the Graphite landing page as shown below:<br>现在可以通过访问所在主机的8080端口来查看Graphite页面了<br><img src="https://www.linode.com/docs/assets/graphite_landing_page.png" alt="Graphite landing page"></p><h2 id="Create-Sample-Data"><a href="#Create-Sample-Data" class="headerlink" title="Create Sample Data"></a>Create Sample Data</h2><p>生成测试数据<br><strong>1.</strong> Generate some test metrics with the following command:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> <span class="number">16</span> <span class="number">2</span>; do echo <span class="string">"test.count $i `date +%s`"</span> | nc -q0 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">2003</span>; sleep <span class="number">6</span>; done</span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> Wait for the command prompt to be returned. Refresh the page and you should see a new <code>test.count</code> metric in the tree on the left:<br><img src="https://www.linode.com/docs/assets/graphite_test_metric.png" alt="Graphite test metric"></p><p>This guide is published under a CC BY-ND 4.0 license.<br>The pure English Version: <a href="https://www.linode.com/docs/uptime/monitoring/deploy-graphite-with-grafana-on-ubuntu-14-04" target="_blank" rel="noopener">https://www.linode.com/docs/uptime/monitoring/deploy-graphite-with-grafana-on-ubuntu-14-04</a></p>]]></content>
      
      <categories>
          
          <category> Monitoring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> graphite </tag>
            
            <tag> grafana </tag>
            
            <tag> Monitoring </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python日期自然月加减实操</title>
      <link href="/python/date-of-python.html"/>
      <url>/python/date-of-python.html</url>
      <content type="html"><![CDATA[<h3 id="这段代码用于对数据库中两个表中不同形式的时间字段进行月份变更操作，月份的变更以自然月形式形式进行。"><a href="#这段代码用于对数据库中两个表中不同形式的时间字段进行月份变更操作，月份的变更以自然月形式形式进行。" class="headerlink" title="这段代码用于对数据库中两个表中不同形式的时间字段进行月份变更操作，月份的变更以自然月形式形式进行。"></a>这段代码用于对数据库中两个表中不同形式的时间字段进行月份变更操作，月份的变更以自然月形式形式进行。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># By Gavin</span></span><br><span class="line"><span class="comment"># Date: 20190909</span></span><br><span class="line"><span class="comment"># Decription: 实现日期的自然月相加减，比如8月31号加一个月是9月30，而不是9月31号或10月1号</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">import</span> math,datetime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_add_month_interval</span><span class="params">(dt,inter)</span>:</span></span><br><span class="line">    m=dt.month+inter<span class="number">-1</span></span><br><span class="line">    y=dt.year</span><br><span class="line">    y=dt.year+int(m/<span class="number">12</span>)</span><br><span class="line">    m=m % <span class="number">12</span> +<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (y,m)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_month_interval</span><span class="params">(dt,inter)</span>:</span></span><br><span class="line">    y,m=_add_month_interval(dt,inter)</span><br><span class="line">    y2,m2=_add_month_interval(dt,inter+<span class="number">1</span>)</span><br><span class="line">    maxD=( datetime.date(y2,m2,<span class="number">1</span>)-datetime.timedelta(days=<span class="number">1</span>) ).day</span><br><span class="line">    d= dt.day&lt;=maxD <span class="keyword">and</span> dt.day <span class="keyword">or</span> maxD</span><br><span class="line">    <span class="comment">#return datetime.date(y,m,d)</span></span><br><span class="line">    <span class="keyword">return</span>(y,m,d)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_year_interval</span><span class="params">(dt,inter)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> add_month_interval(dt,inter*<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 上面三个函数与业务无关，可直接嫁接使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># inter为需要变更的月数，需要加一个月就写1，减两个月就写-2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_metric</span><span class="params">(inter)</span>:</span></span><br><span class="line">    conn=MySQLdb.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">'root'</span>,db=<span class="string">'gavin'</span>,port=<span class="number">3306</span>)</span><br><span class="line">    cur=conn.cursor()</span><br><span class="line">    cur.execute(<span class="string">'select date from metric_impressions order by date desc'</span>) </span><br><span class="line">    <span class="comment">#此时获取到的结果为元组</span></span><br><span class="line">    results = cur.fetchall()</span><br><span class="line">    <span class="comment">#将元组转换为列表</span></span><br><span class="line">    result=list(results)</span><br><span class="line">    <span class="keyword">for</span> now_date <span class="keyword">in</span> result:</span><br><span class="line">        <span class="comment"># now_date[0]格式形如：2016-09-21 12:03:23</span></span><br><span class="line">        timeArray = time.strptime(str(now_date[<span class="number">0</span>]), <span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">        <span class="comment"># time.strptime处理过的数据结构(元组)不能被重新赋值</span></span><br><span class="line">        <span class="comment"># 所以这里需要将其转化为列表</span></span><br><span class="line">        timeArray = list(timeArray)</span><br><span class="line">        dt = datetime.date(timeArray[<span class="number">0</span>],timeArray[<span class="number">1</span>],timeArray[<span class="number">2</span>])</span><br><span class="line">        timeArray[<span class="number">0</span>],timeArray[<span class="number">1</span>],timeArray[<span class="number">2</span>] = add_month_interval(dt,inter)</span><br><span class="line">        new_date = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, timeArray)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"new_date:&#123;&#125;     now_date:&#123;&#125;"</span>.format(new_date, now_date[<span class="number">0</span>])</span><br><span class="line">        sql = <span class="string">'update metric_impressions_hour set date="&#123;&#125;" where date="&#123;&#125;"'</span>.format(new_date, now_date[<span class="number">0</span>])</span><br><span class="line">        cur.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_compaign</span><span class="params">(inter)</span>:</span></span><br><span class="line">    conn=MySQLdb.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">'root'</span>,db=<span class="string">'gavin'</span>,port=<span class="number">3306</span>)</span><br><span class="line">    cur=conn.cursor()</span><br><span class="line">    cur.execute(<span class="string">'select data_date from campaign order by data_date desc'</span>)</span><br><span class="line">    results = cur.fetchall()</span><br><span class="line">    result=list(results)</span><br><span class="line">    <span class="keyword">for</span> now_date <span class="keyword">in</span> result:</span><br><span class="line">        <span class="comment"># now_date[0]格式形如：20160921</span></span><br><span class="line">        timeArray = time.strptime(str(now_date[<span class="number">0</span>]), <span class="string">"%Y%m%d"</span>)</span><br><span class="line">        timeArray = list(timeArray)</span><br><span class="line">        dt = datetime.date(timeArray[<span class="number">0</span>],timeArray[<span class="number">1</span>],timeArray[<span class="number">2</span>])</span><br><span class="line">        timeArray[<span class="number">0</span>],timeArray[<span class="number">1</span>],timeArray[<span class="number">2</span>] = add_month_interval(dt,inter)</span><br><span class="line">        new_date = time.strftime(<span class="string">"%Y%m%d"</span>, timeArray)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"new_date:&#123;&#125;     now_date:&#123;&#125;"</span>.format(new_date, now_date[<span class="number">0</span>])</span><br><span class="line">        sql = <span class="string">'update campaign_stats set data_date="&#123;&#125;" where data_date="&#123;&#125;"'</span>.format(new_date, now_date[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">print</span> sql</span><br><span class="line">        cur.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">update_compaign(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 雕虫小技 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jenkins Operation</title>
      <link href="/jenkins/jenkins.html"/>
      <url>/jenkins/jenkins.html</url>
      <content type="html"><![CDATA[<h2 id="Add-DNS-record"><a href="#Add-DNS-record" class="headerlink" title="Add DNS record"></a>Add DNS record</h2><p>Firstly, we need ceate a host(DNS recore) for our container vpnproxy</p><p>Login <a href="https://ipa-ja-1.example.com" target="_blank" rel="noopener">https://ipa-ja-1.example.com</a><br>add a host as the following picture shows:<br>Identity –&gt; Hosts –&gt; Add :<br><img src="/images/Jenkins/add-host.jpg" alt="Add host"></p><p>By now, we’ve created a DNS recore, map vpnproxy1.shadc.example.com to IP 10.129.1.119</p><a id="more"></a><hr><h2 id="Configure-in-devop-deploy"><a href="#Configure-in-devop-deploy" class="headerlink" title="Configure in devop/deploy"></a>Configure in devop/deploy</h2><p>We are going to deploy the container on host 10.129.0.29, so we need to modify the file ip-10-129-0-29.shadc.example.com.yaml, this yaml file includes all the containers on 10.129.0.29:</p><p>This file is located in <code>~/devops/deploy/puppet/hieradata/node/shadc/</code><br>Add these lines to it:<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vpnproxy.<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">ensure</span>:             <span class="string">'present'</span></span><br></pre></td></tr></table></figure></p><blockquote><p>In this case, we only need “”ensure” option here.</p></blockquote><p>At last, the project <strong>devops/deploy</strong> should be <em>committed</em>.</p><hr><h1 id="Jenkins-Operation"><a href="#Jenkins-Operation" class="headerlink" title="Jenkins Operation"></a>Jenkins Operation</h1><h4 id="clone-Jinkins-cfg-codes"><a href="#clone-Jinkins-cfg-codes" class="headerlink" title="clone Jinkins cfg codes"></a>clone Jinkins cfg codes</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> ssh://gavinwei@git.example.com:29418/devops/jenkinscfg</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/jenkinscfg/cfg/docker/sys</span><br><span class="line">vim docker.yaml</span><br></pre></td></tr></table></figure><h4 id="Add-these-lines-to-the-end-they-are-used-by-Jenkins"><a href="#Add-these-lines-to-the-end-they-are-used-by-Jenkins" class="headerlink" title="Add these lines to the end, they are used by Jenkins:"></a>Add these lines to the end, they are used by Jenkins:</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vpnproxy</span>:</span><br><span class="line">    <span class="attribute">GIT_REPOSITORY</span>:     <span class="string">'docker/sys/vpnproxy'</span></span><br><span class="line">    <span class="attribute">GENERATOR_PREFIX</span>:   <span class="string">'docker_sys_vpnproxy'</span></span><br><span class="line">    <span class="attribute">DEPLOY_IMAGES</span>:      <span class="string">'vpnproxy'</span></span><br></pre></td></tr></table></figure><p>Get the commander jenkins-generate.py:<br><code>cat ~/jenkinscfg/README.md</code><br><code>./jenkins-generate.py --user USER --cfgfile cfg/common/common.yaml --host https://jenkins.example.com/</code></p><h4 id="Change-the-‘USER’-and-path-of-yaml"><a href="#Change-the-‘USER’-and-path-of-yaml" class="headerlink" title="Change the ‘USER’ and path of yaml:"></a>Change the ‘USER’ and path of yaml:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/jenkinscfg</span><br><span class="line">./jenkins-generate.py --user gavinwe --cfgfile cfg/docker/sys/docker.yaml --host https://jenkins.ja.example.com/ --<span class="built_in">jobs</span> vpnproxy</span><br></pre></td></tr></table></figure><p>Login Jenkins web UI: <a href="https://jenkins.ja.example.cn" target="_blank" rel="noopener">https://jenkins.ja.example.cn</a></p><h4 id="Create-new-view-in-‘sys’-tab"><a href="#Create-new-view-in-‘sys’-tab" class="headerlink" title="Create new view in ‘sys’ tab:"></a>Create new view in ‘sys’ tab:</h4><p><img src="/images/Jenkins/sys-tab.jpg" alt="Alt text"></p><h4 id="Change-the-options-like-this"><a href="#Change-the-options-like-this" class="headerlink" title="Change the options like this:"></a>Change the options like this:</h4><p><img src="/images/Jenkins/config.png" alt="Alt text"></p><h4 id="Then-click-the-“RUN”-icon-to-next-step"><a href="#Then-click-the-“RUN”-icon-to-next-step" class="headerlink" title="Then click the “RUN” icon to next step:"></a>Then click the “RUN” icon to next step:</h4><p><img src="/images/Jenkins/options.jpg" alt="Alt text"></p><p>We can get option 1 and 2 in git server( <code>in old screen</code>)</p><ol><li>Option 1 comes from the latest version of git project <code>vpnproxy</code> code you committed</li><li>Option 2 comes from the latest version of  git project <code>devops/deploy</code></li><li>Option 3 is the domain name of host 10.129.0.29, it’s a real server, we will deploy our container on it</li><li>Option 4 is the name of your application’s image</li></ol><p>It taks almost 10 minutes to finish the building. In the meantime , you can see the detail of the building process from here:<br><img src="/images/Jenkins/detail1.jpg" alt="Alt text"></p><p><img src="/images/Jenkins/detail2.jpg" alt="Alt text"></p><p>That’s all.</p>]]></content>
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作笔记 </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jira Manully Install</title>
      <link href="/docker/install-jira-manully.html"/>
      <url>/docker/install-jira-manully.html</url>
      <content type="html"><![CDATA[<h3 id="Launch-Jira-container"><a href="#Launch-Jira-container" class="headerlink" title="Launch Jira container"></a>Launch Jira container</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name jira1 -p 8181:8181 -it --entrypoint bash docker.example.com/jira:0.0.1-SNAPSHOT</span><br></pre></td></tr></table></figure><h3 id="Install-MySQL"><a href="#Install-MySQL" class="headerlink" title="Install MySQL"></a>Install MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/lib/mysql</span><br><span class="line">installMysql.sh</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Start-MySQL"><a href="#Start-MySQL" class="headerlink" title="Start MySQL"></a>Start MySQL</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/mysql bootstrap-pxc</span></span><br></pre></td></tr></table></figure><h3 id="Test-MySQL"><a href="#Test-MySQL" class="headerlink" title="Test MySQL"></a>Test MySQL</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql</span></span><br><span class="line">Welcome to the MySQ<span class="class">L monitor.  Commands end with ;</span><span class="built_in"> or </span>\g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.6.26-74.0-56 Percona XtraDB Cluster (GPL), Release rel74.0, Revision 624ef81, WSREP version 25.12, wsrep_25.12</span><br><span class="line"></span><br><span class="line">Copyright (c) 2009-2015 Percona LLC<span class="built_in"> and/or </span>its affiliates</span><br><span class="line">Copyright (c) 2000, 2015, Oracle<span class="built_in"> and/or </span>its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation<span class="built_in"> and/or </span>its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type 'help;'<span class="built_in"> or </span>'\h' for help. Type '\c' to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h3 id="Install-MySQL-driver"><a href="#Install-MySQL-driver" class="headerlink" title="Install MySQL driver"></a>Install MySQL driver</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mysql-connector-java-5.1.36-bin.jar /opt/jira/lib</span><br></pre></td></tr></table></figure><h3 id="Install-Jira-in-unattended-mode"><a href="#Install-Jira-in-unattended-mode" class="headerlink" title="Install Jira in unattended mode"></a>Install Jira in unattended mode</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@fa463adbc926:/opt/jira<span class="comment"># cat .install4j/response.varfile</span></span><br><span class="line"><span class="comment">#install4j response file for JIRA 6.4.10</span></span><br><span class="line"><span class="comment">#Thu May 26 09:51:12 CST 2016</span></span><br><span class="line">rmiPort<span class="variable">$Long</span>=8005</span><br><span class="line">app.jiraHome=/var/atlassian/application-data/jira</span><br><span class="line">app.install.service<span class="variable">$Boolean</span>=<span class="literal">true</span></span><br><span class="line">existingInstallationDir=/usr/<span class="built_in">local</span>/JIRA</span><br><span class="line">sys.confirmedUpdateInstallationString=<span class="literal">false</span></span><br><span class="line">sys.languageId=en</span><br><span class="line">sys.installationDir=/opt/jira</span><br><span class="line">executeLauncherAction<span class="variable">$Boolean</span>=<span class="literal">true</span></span><br><span class="line">httpPort<span class="variable">$Long</span>=8181</span><br><span class="line">portChoice=custom</span><br></pre></td></tr></table></figure><h1 id="Attendtion-what-jira-py-does-are"><a href="#Attendtion-what-jira-py-does-are" class="headerlink" title="Attendtion, what jira.py does are:"></a>Attendtion, what jira.py does are:</h1><ol><li>map local directory to container</li><li>install mysql</li><li>create database and other sql operation in mysql</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Yaml file runs every time the container starts <span class="keyword">if</span> using dockerStart.py as the entrypoint or cmd.</span><br><span class="line"></span><br><span class="line">Jira.py runs before the container starts. </span><br><span class="line"></span><br><span class="line">Jira.py can also run the container with a different <span class="built_in">command</span>.  This is how it can configure the database. </span><br><span class="line"></span><br><span class="line">The container is run with a <span class="built_in">command</span> to installmysql.  This creates files that arw mapped to the host.  That container exits and a new container runs jira.</span><br><span class="line"></span><br><span class="line">Take a look at mysql.py.  its doing similar things.</span><br></pre></td></tr></table></figure><h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><h3 id="Add-backup-yaml-to-sh"><a href="#Add-backup-yaml-to-sh" class="headerlink" title="Add backup.yaml to *.sh"></a>Add backup.yaml to *.sh</h3><p>docker save docker.example.com/jira:0.0.1-SNAPSHOT | ssh -C <a href="mailto:gavinwei@dind1.docker.example.com" target="_blank" rel="noopener">gavinwei@dind1.docker.example.com</a> “docker load”</p>]]></content>
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> jira </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>percona容器添加logrotate功能</title>
      <link href="/docker/add-logrotate-to-percona-container.html"/>
      <url>/docker/add-logrotate-to-percona-container.html</url>
      <content type="html"><![CDATA[<h1 id="添加logRotate"><a href="#添加logRotate" class="headerlink" title="添加logRotate"></a>添加logRotate</h1><h3 id="拉包"><a href="#拉包" class="headerlink" title="拉包"></a>拉包</h3><p><code>git clone ssh://gavinwei@git.example.com:29418/docker/base</code></p><h3 id="修改脚本"><a href="#修改脚本" class="headerlink" title="修改脚本"></a>修改脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/base/ubuntu-py/src/main/docker</span><br><span class="line">cat logRotate.py</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">()</span>:</span></span><br><span class="line">    os.system(<span class="string">'/etc/cron.daily/logrotate'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logrotate</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        scheduler = BlockingScheduler()</span><br><span class="line">        scheduler.add_job(rotate, <span class="string">'cron'</span>, hour=<span class="number">0</span>, minute=<span class="number">0</span>)</span><br><span class="line">        scheduler.start()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&#123;&#125;: &#123;&#125;"</span>.format(<span class="string">'logrotate'</span>, e)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"logrotate: exited"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    logrotate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="修改Dockerfile"><a href="#修改Dockerfile" class="headerlink" title="修改Dockerfile"></a>修改Dockerfile</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/base/ubuntu-py/src/main/docker</span><br><span class="line"></span><br><span class="line">添加</span><br><span class="line">RUN rm /etc/cron.daily/logrotate</span><br><span class="line">COPY logrotate /etc/cron.daily/</span><br></pre></td></tr></table></figure><h3 id="mvn-install"><a href="#mvn-install" class="headerlink" title="mvn install"></a>mvn install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/base/ubuntu-data</span><br><span class="line">mvn install</span><br></pre></td></tr></table></figure><p>这条命令将会下载一些包到~/.m2/repository/com/example/docker/base/ubuntu-data 下面</p><p><strong><em>镜像ubuntu-data依赖ubuntu-py，而镜像percona依赖ubuntu-data，所以，归初修改的logRotate.py脚本最后会出现在percona镜像的窗口中。</em></strong></p><h3 id="mvn-clean-install"><a href="#mvn-clean-install" class="headerlink" title="mvn clean install"></a>mvn clean install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/base</span><br><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><p>此命令将会生成大量镜像，如：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">ps</span> </span><br><span class="line">root@uide<span class="variable">v:</span>~/percona# docker images</span><br><span class="line">REPOSITORY                                TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">docker.example.<span class="keyword">com</span>/percona          <span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT      <span class="number">4</span>bf97cc1a755        <span class="number">2</span> minutes ago       <span class="number">951.8</span> MB</span><br><span class="line">docker.example.<span class="keyword">com</span>/ubuntu-data      <span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT      e614ede872af        <span class="number">11</span> minutes ago      <span class="number">795.9</span> MB</span><br><span class="line">docker.example.<span class="keyword">com</span>/ubuntu-<span class="keyword">py</span>        <span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT      <span class="number">7397</span>b0030230        <span class="number">12</span> minutes ago      <span class="number">795.9</span> MB</span><br><span class="line">docker.example.<span class="keyword">com</span>/varnish          <span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT      aa2377d44ecc        <span class="number">19</span> hours ago        <span class="number">954.2</span> MB</span><br><span class="line">docker.example.<span class="keyword">com</span>/ubuntu-data      <span class="number">0.0</span>.<span class="number">22</span>              <span class="number">55</span>ee02d4cfa6        <span class="number">3</span> months ago        <span class="number">794.4</span> MB</span><br><span class="line">docker.example.<span class="keyword">com</span>/ubuntu-<span class="keyword">py</span>        <span class="number">0.0</span>.<span class="number">22</span>              d98e886c4808        <span class="number">3</span> months ago        <span class="number">794.4</span> MB</span><br><span class="line">docker.example.<span class="keyword">com</span>/ubuntu-java      <span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT      <span class="number">313</span>ede731d40        <span class="number">3</span> months ago        <span class="number">734.1</span> MB</span><br><span class="line">docker.example.<span class="keyword">com</span>/ubuntu-ldap      <span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT      <span class="number">80201502</span>aab7        <span class="number">3</span> months ago        <span class="number">358.2</span> MB</span><br><span class="line">docker.example.<span class="keyword">com</span>/ubuntu-upstart   <span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT      <span class="number">927</span>c581760a9        <span class="number">3</span> months ago        <span class="number">268.1</span> MB</span><br><span class="line">docker.example.<span class="keyword">com</span>/ubuntu           <span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT      <span class="number">918</span>e86b5fd29        <span class="number">3</span> months ago        <span class="number">229.6</span> MB</span><br><span class="line">docker.example.<span class="keyword">com</span>/dind             <span class="number">0.0</span>.<span class="number">3</span>               <span class="number">98</span>be25cb5c64        <span class="number">3</span> months ago        <span class="number">805.7</span> MB</span><br><span class="line">docker.example.<span class="keyword">com</span>/ubuntu           <span class="number">14.04</span>.<span class="number">3</span>             af88597ec24b        <span class="number">4</span> months ago        <span class="number">187.9</span> MB</span><br><span class="line">docker.example.<span class="keyword">com</span>/collectd         <span class="number">0.0</span>.<span class="number">6</span>               f46eb5b0649b        <span class="number">4</span> months ago        <span class="number">655.9</span> MB</span><br></pre></td></tr></table></figure><h3 id="重新build-percona镜像"><a href="#重新build-percona镜像" class="headerlink" title="重新build percona镜像"></a>重新build percona镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/percona/src/main/docker</span><br><span class="line">cat backup.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler</span><br><span class="line"><span class="keyword">from</span> apscheduler.executors.pool <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fullbackup</span><span class="params">()</span>:</span></span><br><span class="line">    os.system(<span class="string">'/usr/local/bin/surrogate -b full'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">incremental</span><span class="params">()</span>:</span></span><br><span class="line">    os.system(<span class="string">'if -f /backup/backups/.digext &amp;&amp; grep full /backup/backups/.digest ;then /usr/local/bin/surrogate -b inc ; else /usr/local/bin/surrogate -b full ; fi'</span>)</span><br><span class="line"></span><br><span class="line">yaml_file = <span class="string">'/etc/mysql/conf.d/backup.yaml'</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists( <span class="string">'/backup.yaml'</span> ):</span><br><span class="line">    yaml_file = <span class="string">'/backup.yaml'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists( yaml_file ):</span><br><span class="line">    f = open(yaml_file,<span class="string">'r'</span>)</span><br><span class="line">    x = yaml.load(f)</span><br><span class="line"></span><br><span class="line">    executors = &#123;</span><br><span class="line">        <span class="string">'default'</span>: ThreadPoolExecutor(<span class="number">1</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    scheduler = BlockingScheduler(executors=executors)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># We can only make full backup now</span></span><br><span class="line">    <span class="comment">#------------------Full Backup----------------------------------</span></span><br><span class="line">    <span class="keyword">if</span> x[<span class="string">'backup'</span>].has_key(<span class="string">'full'</span>) <span class="keyword">and</span> x[<span class="string">'backup'</span>][<span class="string">'full'</span>].has_key(<span class="string">'type'</span>) <span class="keyword">and</span> x[<span class="string">'backup'</span>][<span class="string">'full'</span>].has_key(<span class="string">'time'</span>):</span><br><span class="line">        scheduler.add_job(fullbackup,x[<span class="string">'backup'</span>][<span class="string">'full'</span>][<span class="string">'type'</span>], max_instances=<span class="number">2</span>, **x[<span class="string">'backup'</span>][<span class="string">'full'</span>][<span class="string">'time'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#------------------Incremental Backup---------------------------</span></span><br><span class="line">    <span class="keyword">if</span> x[<span class="string">'backup'</span>].has_key(<span class="string">'incremental'</span>) <span class="keyword">and</span> x[<span class="string">'backup'</span>][<span class="string">'incremental'</span>].has_key(<span class="string">'type'</span>) <span class="keyword">and</span> x[<span class="string">'backup'</span>][<span class="string">'incremental'</span>].has_key(<span class="string">'time'</span>):</span><br><span class="line">        scheduler.add_job(incremental,x[<span class="string">'backup'</span>][<span class="string">'incremental'</span>][<span class="string">'type'</span>], max_instances=<span class="number">2</span>, **x[<span class="string">'backup'</span>][<span class="string">'incremental'</span>][<span class="string">'time'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        scheduler.start()</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="comment"># When there is error in backup.yaml file</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span> :</span><br><span class="line">          time.sleep(<span class="number">86400</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span> :</span><br><span class="line">        time.sleep(<span class="number">86400</span>)</span><br></pre></td></tr></table></figure><p><code>cat backup.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">backup:</span></span><br><span class="line"><span class="attr">   full:</span></span><br><span class="line"><span class="attr">       type:</span> <span class="string">"cron"</span></span><br><span class="line"><span class="attr">       time:</span></span><br><span class="line"><span class="attr">           hour:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">           minute:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">   incremental:</span></span><br><span class="line"><span class="attr">       type:</span> <span class="string">"cron"</span></span><br><span class="line"><span class="attr">       time:</span></span><br><span class="line"><span class="attr">           hour:</span> <span class="string">"*/2"</span></span><br></pre></td></tr></table></figure><p><code>cat startMysql.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">exec</span> dockerStart.py --cfgfile /clustercheck.yaml /startMysql.yaml /backupMysql.yaml</span><br></pre></td></tr></table></figure><p><code>cat bootstrapMysql.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">exec</span> dockerStart.py --cfgfile /clustercheck.yaml /bootstrapMysql.yaml /backupMysql.yaml</span><br></pre></td></tr></table></figure><h3 id="run-scripts-auto-sh"><a href="#run-scripts-auto-sh" class="headerlink" title="run ~/scripts/auto.sh"></a>run ~/scripts/auto.sh</h3>]]></content>
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> container </tag>
            
            <tag> lorote </tag>
            
            <tag> 日志切割 </tag>
            
            <tag> percona </tag>
            
            <tag> Python </tag>
            
            <tag> 工作笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Percona容器部署</title>
      <link href="/docker/compile-image.html"/>
      <url>/docker/compile-image.html</url>
      <content type="html"><![CDATA[<h2 id="镜像编译"><a href="#镜像编译" class="headerlink" title="镜像编译"></a>镜像编译</h2><p>以镜像percona为例，假如我们应用场景如下：<br>现在需要向pernoa镜像中添加数据库自动备份功能</p><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> ssh://gavinwei@git.example.com:29418/docker/bd/percona</span><br></pre></td></tr></table></figure><h3 id="操作percona代码"><a href="#操作percona代码" class="headerlink" title="操作percona代码"></a>操作percona代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd ~/percona</span></span><br><span class="line"><span class="comment"># ls </span></span><br><span class="line">pom.xml  proguard.conf  src</span><br></pre></td></tr></table></figure><p>我们所需要操作都在src目录的最底层：<br><a id="more"></a><br><code>cd src/main/docker/</code></p><p>在src/main/docker/目录下添加要新增的文件及脚本，并修改Dockerfile文件</p><h3 id="使用MAVEN进行编译"><a href="#使用MAVEN进行编译" class="headerlink" title="使用MAVEN进行编译"></a>使用MAVEN进行编译</h3><p>全部修改完成后，回到percona顶层目录：</p><p><code>cd ~/pernona</code></p><h4 id="自动获取镜像版本号："><a href="#自动获取镜像版本号：" class="headerlink" title="自动获取镜像版本号："></a>自动获取镜像版本号：</h4><p><code>mvn -U versions:resolve-ranges</code></p><h4 id="正式编译"><a href="#正式编译" class="headerlink" title="正式编译"></a>正式编译</h4><p><code>mvn clean package -X</code></p><h3 id="将镜像导入dind"><a href="#将镜像导入dind" class="headerlink" title="将镜像导入dind"></a>将镜像导入dind</h3><p><code>docker save docker.example.com/jira:0.0.1-SNAPSHOT | ssh -C &quot;你的帐户名&quot;@dind1.docker.example.com &quot;sudo docker load&quot;</code></p><p>这里的帐户名为我们邮件地址中@前面的名称，以下同理。</p><p>这一步完成后，窗口dind.1中已经有了我们重新编辑过镜像</p><p>此时有两种方法来使用该镜像来启动容器</p><h2 id="方法1：-使用fab脚本"><a href="#方法1：-使用fab脚本" class="headerlink" title="方法1： 使用fab脚本"></a>方法1： 使用fab脚本</h2><p>这种方法在之前的邮件DIND的安装中有提到过，使用<code>fab deploy:hosts=&quot;${HOSTS}&quot;</code>命令进行部署</p><h2 id="方法2：进入dind-1，直接运行run-puppet脚本"><a href="#方法2：进入dind-1，直接运行run-puppet脚本" class="headerlink" title="方法2：进入dind.1，直接运行run-puppet脚本"></a>方法2：进入dind.1，直接运行run-puppet脚本</h2><p>进行入dind.1<br><code>docker exec -it dind.1 bash</code></p><p>运行脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/你的用户名</span><br><span class="line"><span class="comment">#以debug模式运行puppet，便于排错</span></span><br><span class="line">./run-puppet --debug</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> container </tag>
            
            <tag> percona </tag>
            
            <tag> image </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SS5 Installation</title>
      <link href="/docker/ss5.html"/>
      <url>/docker/ss5.html</url>
      <content type="html"><![CDATA[<h3 id="安装ss5"><a href="#安装ss5" class="headerlink" title="安装ss5"></a>安装ss5</h3><p><code>apt-get install gcc make</code></p><h4 id="下载源码包"><a href="#下载源码包" class="headerlink" title="下载源码包"></a>下载源码包</h4><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://120.52.73.44/jaist.dl.sourceforge.net/project/ss5/ss5/3.8.9<span class="string">-8</span>/ss5<span class="string">-3</span>.8.9<span class="string">-8</span>.tar.gz</span><br><span class="line">cd ./ss5<span class="string">-3</span>.8.9<span class="string">-8</span></span><br><span class="line">./configure</span><br></pre></td></tr></table></figure><p>报错：<br><code>configure: error: *** Some of the headers weren&#39;t found ***</code><br>安装libpam0g-dev解决：<br><code>apt-get install libpam0g-dev</code></p><p>make报错：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">SS5OpenLdap</span><span class="selector-class">.c</span><span class="selector-pseudo">:29</span><span class="selector-pseudo">:18</span>: <span class="selector-tag">fatal</span> <span class="selector-tag">error</span>: <span class="selector-tag">ldap</span><span class="selector-class">.h</span>: <span class="selector-tag">No</span> <span class="selector-tag">such</span> <span class="selector-tag">file</span> <span class="selector-tag">or</span> <span class="selector-tag">directory</span></span><br><span class="line"> <span class="selector-id">#include</span> &lt;<span class="selector-tag">ldap</span><span class="selector-class">.h</span>&gt;</span><br><span class="line">                  ^</span><br><span class="line"><span class="selector-tag">compilation</span> <span class="selector-tag">terminated</span>.</span><br><span class="line"><span class="selector-tag">make</span><span class="selector-attr">[1]</span>: *** <span class="selector-attr">[SS5OpenLdap.o]</span> <span class="selector-tag">Error</span> 1</span><br></pre></td></tr></table></figure></p><p>解决：<br><code>apt-get install libcurl4-openssl-dev</code></p><a id="more"></a><hr><p>主要问题是官方发布的版本没有for ubuntu的, 所以下载fedora版本, 安装完成后, 再修改一些默认脚本,<br>使之适应 ubuntu</p><hr><p>##ubuntu 下的 ss5 安装 (和附加包 安装):</p><p>1,   tar -zxvf ss5-3.8.9-1.tar.gz<br>./configre<br>发现很多包没有安装, 所以下面挨个安装</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install dpkg-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line">./configure</span><br></pre></td></tr></table></figure><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">aptitude search pam | grep <span class="built_in">dev</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install libpam0g-<span class="built_in">dev</span></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line">aptitude search ldap | grep <span class="built_in">dev</span>   </span><br><span class="line">sudo apt-<span class="built_in">get</span> install libldap2-<span class="built_in">dev</span></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line">aptitude search ssl | grep <span class="built_in">dev</span>   </span><br><span class="line">sudo apt-<span class="built_in">get</span> install libssl-<span class="built_in">dev</span></span><br><span class="line">./configure</span><br></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssl</span><br><span class="line">(源程序中用到了openssl, 源代码中 <span class="meta-keyword">/include/</span>SS5Radius.h  有这样一行: <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/md5.h&gt;</span> )</span></span><br></pre></td></tr></table></figure><hr><p>有可能要先安装apt功能:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">install</span> apt-<span class="keyword">file</span></span><br><span class="line">sudo apt-<span class="keyword">file</span> <span class="keyword">update</span></span><br><span class="line">apt-<span class="keyword">file</span> <span class="keyword">search</span> functions</span><br></pre></td></tr></table></figure></p><hr><p><strong>未出现下述问题 可忽略</strong><br>./configure<br>make   发现编译二进制.o 都通过了, 但在最终链接时候报错, 说MD5_xxx 几个函数没有定义.</p><p>vi src/Makefile 加入 -lcrypto 库链接<br>LIBS = -lpthread -rdynamic -ldl -lssl -lcrypto -lldap -lpam -lpam_misc</p><p>这时候vfork.h还是没有, 但没有关系, </p><hr><p>可以编译和安装ss5了:<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line"><span class="built_in">make</span></span><br><span class="line"><span class="built_in">make</span> install</span><br></pre></td></tr></table></figure></p><p>备注: Makefile中, 相应的安装路径:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">S</span>[<span class="string">"trc_path_base"</span>]=<span class="string">"/var/log/ss5"</span></span><br><span class="line">    <span class="number">539</span> <span class="symbol">S</span>[<span class="string">"log_path_base"</span>]=<span class="string">"/var/log/ss5"</span></span><br><span class="line">    <span class="number">540</span> <span class="symbol">S</span>[<span class="string">"man_path_base"</span>]=<span class="string">"/usr/share/man"</span></span><br><span class="line">    <span class="number">541</span> <span class="symbol">S</span>[<span class="string">"doc_path_base"</span>]=<span class="string">"/usr/share/doc"</span></span><br><span class="line">    <span class="number">542</span> <span class="symbol">S</span>[<span class="string">"bin_path_base"</span>]=<span class="string">"/usr/sbin"</span></span><br><span class="line">    <span class="number">543</span> <span class="symbol">S</span>[<span class="string">"conf_path_base"</span>]=<span class="string">"/etc/opt"</span></span><br><span class="line">    <span class="number">544</span> <span class="symbol">S</span>[<span class="string">"lib_path_base"</span>]=<span class="string">"/usr/lib"</span></span><br></pre></td></tr></table></figure></p><p>然后要对ss5的启动脚本进行修正:<br>因为安装包是for fedora的, 直接安装在unbuntu中, 有两个问题, 要修改:</p><ol><li>安装的默认启动脚本, 目录不对</li><li>启动脚本中, 用到了两个fedora平台的启动子脚本, unbuntu里没有, 所以要禁用.</li><li>对启动脚本做一些其它的小修正</li></ol><h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3><p>将安装到fedora系统默认目录下的启动脚本, copy 到 unbuntu 默认启动目录里面,<br><code>cp /etc/rc.d/init.d/ss5     /etc/init.d/ss5</code></p><h3 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h3><p>改动成下面脚本,<br>或者直接copy 或者 upload 我修改过的脚本到/etc/init.d/ss5:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig: 345 20 80</span></span><br><span class="line"><span class="comment"># description: This script takes care of starting \</span></span><br><span class="line"><span class="comment">#              and stopping ss5</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">OS=`uname -s`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$OS</span> = <span class="string">"Linux"</span> ] || [ <span class="variable">$OS</span> = <span class="string">"SunOS"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="comment">#SS5_LOG_FILE = "/var/log/ss5log"</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line"><span class="comment"># . /etc/rc.d/init.d/functions</span></span><br><span class="line"><span class="comment"># ./lib/lsb/init-functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source networking configuration.</span></span><br><span class="line"><span class="comment"># . /etc/sysconfig/network</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check that networking is up.</span></span><br><span class="line"><span class="comment"># [ $&#123;NETWORKING&#125; = "no" ] &amp;&amp; exit 0</span></span><br><span class="line"></span><br><span class="line"> [ -f /usr/sbin/ss5 ] || <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Test custom variables</span></span><br><span class="line"><span class="built_in">test</span> -f /etc/sysconfig/ss5 &amp;&amp; . /etc/sysconfig/ss5</span><br><span class="line"></span><br><span class="line"><span class="comment"># See how we were called.</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">        <span class="comment"># Start daemon.</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Starting ss5... "</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$OS</span> = <span class="string">"Linux"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="comment">#            daemon /usr/sbin/ss5 -t $SS5_OPTS   $SS5_OPTS = -u root in file: /etc/sysconfig/ss5  </span></span><br><span class="line">            <span class="comment"># /usr/sbin/ss5 -t -m -b 0.0.0.0:1080 -u root</span></span><br><span class="line">             /usr/sbin/ss5 -t -b 0.0.0.0:1080 -u root</span><br><span class="line">         <span class="comment">#  touch /var/lock/subsys/ss5</span></span><br><span class="line">            touch /var/run/ss5/ss5.pid</span><br><span class="line"><span class="comment">#   else</span></span><br><span class="line"><span class="comment">#     if [ $OS = "SunOS" ]; then</span></span><br><span class="line"><span class="comment">#              /usr/sbin/ss5 -t </span></span><br><span class="line"><span class="comment">#              touch /var/lock/subsys/ss5</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">              /usr/<span class="built_in">local</span>/sbin/ss5 -t </span><br><span class="line">            touch /var/run/ss5/ss5.pid</span><br><span class="line"><span class="comment">#            touch /var/lock/subsys/ss5</span></span><br><span class="line"><span class="comment">#     fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"done"</span></span><br><span class="line">        ;;</span><br><span class="line"></span><br><span class="line">  stop)</span><br><span class="line">        <span class="comment"># Stop daemon.</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Shutting down ss5... "</span></span><br><span class="line">killall ss5 </span><br><span class="line">rm -f /var/run/ss5/ss5.pid</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"done"</span></span><br><span class="line">        ;;</span><br><span class="line">  reload)</span><br><span class="line">        <span class="comment"># Reload configuration</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$OS</span> = <span class="string">"Linux"</span> ] || [ <span class="variable">$OS</span> = <span class="string">"SunOS"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Reloading ss5... "</span></span><br><span class="line">    killproc ss5 -1</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pkill -HUP ss5</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"done reload"</span></span><br><span class="line">    ;;</span><br><span class="line">  restart)</span><br><span class="line">        <span class="comment"># Restart daemon</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Restarting ss5... "</span></span><br><span class="line">    <span class="variable">$0</span> stop</span><br><span class="line">    <span class="variable">$0</span> start</span><br><span class="line">    ;;</span><br><span class="line">  status)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$OS</span> = <span class="string">"Linux"</span> ] || [ <span class="variable">$OS</span> = <span class="string">"SunOS"</span> ]; <span class="keyword">then</span></span><br><span class="line">      status ss5</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: ss5 &#123;start|stop|status|restart|reload&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure></p><h4 id="对ss5进行配置"><a href="#对ss5进行配置" class="headerlink" title="对ss5进行配置:"></a>对ss5进行配置:</h4><p>修改/etc/opt/ss5 目录下的两个文件:  ss5.conf  and ss5.passwd</p><p>修改配置文件:<br>/etc/opt/ss5/ss5.conf<br>修改:<br>auth 0.0.0.0/0 – -<br>改成:<br>auth 0.0.0.0/0 – u</p><p>修改：<br>permit – 0.0.0.0/0 – 0.0.0.0/0 – – – – -<br>改成:<br>permit u 0.0.0.0/0 – 0.0.0.0/0 – – – – -</p><p>修改配置文件 (这一步也可以省略, 我改的启动脚本中已经带这个参数)：<br>/etc/sysconfig/ss5<br>打开：<code>SS5_OPTS=” -u root”</code></p><p>然后在/etc/opt/ss5/ss5.passwd中, 一行一个用户+密码<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat ss5.passwd`</span><br><span class="line"><span class="keyword">test </span>123456</span><br></pre></td></tr></table></figure></p><p>最后启动ss5, 可能第一次运行时候, 需要手动建立pid目录:</p><p>可能需要修改脚本权限:<br>ls -la /etc/init.d/<br>chmod 700 /etc/init.d/ss5</p><p>然后启动, 停止下测试:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /etc/init.d/ss5 start</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/init.d/ss5 stop</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/rc.d/init.d/ss5 start</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/rc.d/init.d/ss5 start</span></span><br><span class="line">doneting ss5… [ OK ]</span><br></pre></td></tr></table></figure></p><p>再重启下看看:<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/rc.d/init.d/ss5 restart</span></span><br><span class="line"><span class="attribute">Restarting</span> ss5… Shutting down ss5…</span><br><span class="line"><span class="attribute">done</span><span class="meta"> [ OK ]</span></span><br><span class="line"><span class="attribute">doneting</span> ss5…<span class="meta"> [ OK ]</span></span><br></pre></td></tr></table></figure></p><p>没问题了, 你就可以使用服务器的IP, 端口1080, 用户test, 密码123456<br>来测试你的socks5服务器了, 更多高级应用, 参看ss5.conf, 里面有详细的说明.</p>]]></content>
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ss5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker deployment</title>
      <link href="/docker/docker-deployment.html"/>
      <url>/docker/docker-deployment.html</url>
      <content type="html"><![CDATA[<p>Docker容器部署的大致步骤如下：</p><h2 id="一、在VM层的操作"><a href="#一、在VM层的操作" class="headerlink" title="一、在VM层的操作"></a>一、在VM层的操作</h2><h4 id="镜像编译工作"><a href="#镜像编译工作" class="headerlink" title="镜像编译工作"></a>镜像编译工作</h4><p>在镜像项目的顶层目录下运行：<br><code>mvn versions:resolve-ranges</code><br>这一步用于获取base镜像的版本号<br>下一步进行镜像的编译：<br><code>mvn clean install</code></p><p>编译完成后，可使用<code>docker images</code>命令来查看所编译镜像是否存在</p><h4 id="传输镜像"><a href="#传输镜像" class="headerlink" title="传输镜像"></a>传输镜像</h4><p>通过下面命令将编译好的镜像传输至DIND：<br><code>docker save docker.example.com/jira:0.0.1-SNAPSHOT | ssh -C root@dind1.docker.example.com &quot;docker load&quot;</code><br><a id="more"></a></p><h4 id="同步puppet配置文件"><a href="#同步puppet配置文件" class="headerlink" title="同步puppet配置文件"></a>同步puppet配置文件</h4><p>git上的devops/deploy项目提供了在DIND中启动容器至关重要的文件支持，对于第一个docker项目而言，在VM层修改过devops/deploy中的配置文件后，都需要进入path/to/devops/deploy目录中,使用fab命令将文件同步到DIND中的/home/gavinwei目录下：<br><code>fab -u gavinwei provision:hosts=dind1.docker.example.com</code><br><em>gavinwei 可替换为你自已的用户名</em></p><h2 id="二、在DIND中的操作"><a href="#二、在DIND中的操作" class="headerlink" title="二、在DIND中的操作"></a>二、在DIND中的操作</h2><h4 id="进入DIND"><a href="#进入DIND" class="headerlink" title="进入DIND"></a>进入DIND</h4><p>使用如下命令进行DIND窗口内部，默认以root身份登录：<br><code>docker exec -it dind.1 bash</code></p><p>进入你帐号所在的家目录，比如我之前在fab命令中使用的是gavinwei，就可以使用如下命令：<br><code>cd /home/gavinwei</code></p><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p> 修改文件<code>/home/gavinwei/puppet/hieradata/node/sj/dind1.docker.example.com.yaml</code>，将其中的项目名称修改为自己的项目名称后，进行run-puppet脚本：<br> <code>./run-puppet --debug</code><br><em>–debug选项可以显示启动的具体过程，便于debug</em></p><p>随后容器就启动了，可使用<code>docker ps</code>查看。</p><hr><p>   DIND 是本地测试环境的基础，其部署方法及步骤详见附件。</p>]]></content>
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> DIND </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vpnporxy 部署纪要</title>
      <link href="/docker/fabfile.html"/>
      <url>/docker/fabfile.html</url>
      <content type="html"><![CDATA[<h3 id="解决fabfile中hosts变量的获取问题"><a href="#解决fabfile中hosts变量的获取问题" class="headerlink" title="解决fabfile中hosts变量的获取问题"></a>解决fabfile中hosts变量的获取问题</h3><p>test_depoly中使用_find_hosts_by_cluster_and_container（cluster,container）来获取hosts，但是传进来的这两个变量都有可能是列表，所以要解决列表问题，最后还要解决hosts列表中的元素为列表的情况<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> type(containers) == str:</span><br><span class="line">   hosts = map(<span class="keyword">lambda</span> cluster: _find_hosts_by_cluster_and_container(cluster, containers), clusters)</span><br><span class="line"><span class="keyword">if</span> type(containers) == list:</span><br><span class="line">   hosts = []</span><br><span class="line">   <span class="keyword">for</span> containers <span class="keyword">in</span> containerss:</span><br><span class="line">       host = map(<span class="keyword">lambda</span> cluster: _find_hosts_by_cluster_and_container(cluster, container), clusters)</span><br><span class="line">       hosts.extend(host)</span><br><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> hosts:</span><br><span class="line">   <span class="keyword">if</span> type(host) == list:</span><br><span class="line">      lst.extend(host)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      lst.append(host)</span><br><span class="line">hosts = lst</span><br><span class="line"><span class="keyword">print</span> hosts</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(hosts) == <span class="number">0</span>:</span><br><span class="line">    env.hosts = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    env.hosts = hosts</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="容器域名的添加"><a href="#容器域名的添加" class="headerlink" title="容器域名的添加"></a>容器域名的添加</h3><p>一开始没有搞清楚服务域名和部署主机域名，浪费了点时间来处理这个问题，新添加的域名生效也很慢。</p><h3 id="version-No-的获取问题"><a href="#version-No-的获取问题" class="headerlink" title="version No. 的获取问题"></a>version No. 的获取问题</h3><p>上面所有总是解决后，遇到的最后一个报错：<br><img src="/images/fabfile/vpnproxy-error.png" alt="Alt text"></p><p>版本号问题，Nia分辨出是docker.pp没有获取正确的version number，最后找到是主机46没有建立tag file，初建后，运行成功。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">my</span>::<span class="attribute">config</span>::<span class="attribute">tags</span>::<span class="attribute">vpnproxy</span>:</span><br><span class="line">    <span class="attribute">tag</span>: <span class="number">87</span>aded288d1dbc874289852bc652db5e334a4959-SNAPSHOT</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Python </tag>
            
            <tag> fabfile </tag>
            
            <tag> fabric </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
